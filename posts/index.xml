<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on BoseLiao&#39;s Blog</title>
		<link>https://boseliao.github.io/posts/</link>
		<description>Recent content in Posts on BoseLiao&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 28 Jul 2020 15:49:35 +0800</lastBuildDate>
		<atom:link href="https://boseliao.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Pygame:make_game</title>
			<link>https://boseliao.github.io/posts/pygamemake_game/</link>
			<pubDate>Tue, 28 Jul 2020 15:49:35 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/pygamemake_game/</guid>
			<description>通过对代码的重构能够使得我们的代码更加具有可读性，方便维护更新。
import pygame from pygame.sprite import Group from settings import Settings from ship import Ship import game_functions as gf from game_states import GameStates from button import Button from scoreboard import Scoreboard def run_game(): pygame.init() ai_settings = Settings() screen = pygame.display.set_mode((ai_settings.screen_width, ai_settings.screen_height)) pygame.display.set_caption(&amp;#34;alien invasion&amp;#34;) play_button = Button(ai_settings, screen, &amp;#34;Play&amp;#34;) ship = Ship(ai_settings, screen) aliens = Group() bullets = Group() states = GameStates(ai_settings) sb = Scoreboard(ai_settings,screen,states) gf.create_fleet(ai_settings, screen, ship, aliens) while True: gf.</description>
			<content type="html"><![CDATA[<p>通过对代码的重构能够使得我们的代码更加具有可读性，方便维护更新。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.sprite</span> <span class="kn">import</span> <span class="n">Group</span>

<span class="kn">from</span> <span class="nn">settings</span> <span class="kn">import</span> <span class="n">Settings</span>
<span class="kn">from</span> <span class="nn">ship</span> <span class="kn">import</span> <span class="n">Ship</span>
<span class="kn">import</span> <span class="nn">game_functions</span> <span class="kn">as</span> <span class="nn">gf</span>
<span class="kn">from</span> <span class="nn">game_states</span> <span class="kn">import</span> <span class="n">GameStates</span>
<span class="kn">from</span> <span class="nn">button</span> <span class="kn">import</span> <span class="n">Button</span>
<span class="kn">from</span> <span class="nn">scoreboard</span> <span class="kn">import</span> <span class="n">Scoreboard</span>

<span class="k">def</span> <span class="nf">run_game</span><span class="p">():</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
    
    <span class="n">ai_settings</span> <span class="o">=</span> <span class="n">Settings</span><span class="p">()</span>
    <span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">ai_settings</span><span class="o">.</span><span class="n">screen_width</span><span class="p">,</span>
                                      <span class="n">ai_settings</span><span class="o">.</span><span class="n">screen_height</span><span class="p">))</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s2">&#34;alien invasion&#34;</span><span class="p">)</span>
    
    <span class="n">play_button</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span> <span class="n">screen</span><span class="p">,</span> <span class="s2">&#34;Play&#34;</span><span class="p">)</span>
    
    <span class="n">ship</span> <span class="o">=</span> <span class="n">Ship</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span> <span class="n">screen</span><span class="p">)</span>
    <span class="n">aliens</span> <span class="o">=</span> <span class="n">Group</span><span class="p">()</span>
    <span class="n">bullets</span> <span class="o">=</span> <span class="n">Group</span><span class="p">()</span>
    <span class="n">states</span> <span class="o">=</span> <span class="n">GameStates</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">)</span>
    <span class="n">sb</span> <span class="o">=</span> <span class="n">Scoreboard</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span><span class="n">screen</span><span class="p">,</span><span class="n">states</span><span class="p">)</span>
    
    <span class="n">gf</span><span class="o">.</span><span class="n">create_fleet</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span> <span class="n">screen</span><span class="p">,</span> <span class="n">ship</span><span class="p">,</span> <span class="n">aliens</span><span class="p">)</span>
    
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        
        <span class="n">gf</span><span class="o">.</span><span class="n">check_events</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span><span class="n">states</span><span class="p">,</span><span class="n">screen</span><span class="p">,</span><span class="n">ship</span><span class="p">,</span><span class="n">bullets</span><span class="p">,</span>
                        <span class="n">aliens</span><span class="p">,</span><span class="n">play_button</span><span class="p">,</span><span class="n">sb</span><span class="p">)</span>   
        <span class="k">if</span> <span class="n">states</span><span class="o">.</span><span class="n">game_active</span><span class="p">:</span>
            
            <span class="n">ship</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>
            <span class="n">gf</span><span class="o">.</span><span class="n">update_bullets</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span> <span class="n">states</span><span class="p">,</span> <span class="n">screen</span><span class="p">,</span> <span class="n">sb</span><span class="p">,</span> <span class="n">ship</span><span class="p">,</span>
                              <span class="n">aliens</span><span class="p">,</span> <span class="n">bullets</span><span class="p">)</span>
            <span class="n">gf</span><span class="o">.</span><span class="n">update_aliens</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span> <span class="n">states</span><span class="p">,</span> <span class="n">screen</span><span class="p">,</span> <span class="n">ship</span><span class="p">,</span>
                             <span class="n">aliens</span><span class="p">,</span> <span class="n">bullets</span><span class="p">,</span> <span class="n">sb</span><span class="p">)</span>
        
        <span class="n">gf</span><span class="o">.</span><span class="n">update_screen</span><span class="p">(</span><span class="n">ai_settings</span><span class="p">,</span><span class="n">states</span><span class="p">,</span><span class="n">sb</span><span class="p">,</span><span class="n">screen</span><span class="p">,</span><span class="n">ship</span><span class="p">,</span><span class="n">aliens</span><span class="p">,</span>
                         <span class="n">bullets</span><span class="p">,</span> <span class="n">play_button</span><span class="p">)</span>
        
<span class="n">run_game</span><span class="p">()</span></code></pre></div>
<p>将事件的捕捉，控制重构成单独定义的函数，以及实体类的定义以及其他功能的添加写成单独的模块将有助于代码的可读性。完整的代码参考<a href="https://github.com/Boseliao/alien_invasion">alien_invasion</a></p>

<p>利用<code>pyinstaller</code>打包游戏</p>

<p>打包命令</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#默认选项，除了demo.exe外，还会在在dist中生成很多依赖文件</span>
<span class="n">pyinstaller</span> <span class="o">-</span><span class="n">D</span> <span class="n">demo</span><span class="o">.</span><span class="n">py</span>
<span class="c1">#只在dist中生产一个demo.exe文件。</span>
<span class="n">pyinstaller</span> <span class="o">-</span><span class="n">F</span> <span class="n">demo</span><span class="o">.</span><span class="n">py</span></code></pre></div>
<p>当需要打包含有图片的资源的时候</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#生成demo.spec文本，并对其中的resources进行配置添加</span>
<span class="n">pyi</span><span class="o">-</span><span class="n">makespec</span> <span class="n">demo</span><span class="o">.</span><span class="n">py</span>
<span class="c1">#执行打包任务</span>
<span class="n">pyinstaller</span> <span class="n">demo</span><span class="o">.</span><span class="n">spec</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Pygame:Sound</title>
			<link>https://boseliao.github.io/posts/pygamesound/</link>
			<pubDate>Tue, 28 Jul 2020 12:39:54 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/pygamesound/</guid>
			<description>在Pygame同样定义了特殊的模块pygame.mixer来播放声音效果。
SCREEN_SIZE = (640, 480) # 重力因子，实际上是单位 像素/平方秒 GRAVITY = 250.0 # 弹力系数，不要超过1! BOUNCINESS = 0.7 import pygame from pygame.locals import * from sys import exit from random import randint from gameobjects.vector2 import Vector2 def stero_pan(x_coord, screen_width): &amp;#34;&amp;#34;&amp;#34;这个函数根据位置决定要播放声音左右声道的音量&amp;#34;&amp;#34;&amp;#34; right_volume = float(x_coord) / screen_width left_volume = 1.0 - right_volume return (left_volume, right_volume) class Ball(): &amp;#34;&amp;#34;&amp;#34;小球类，实际上我们可以使用Sprite类来简化&amp;#34;&amp;#34;&amp;#34; def __init__(self, position, speed, image, bounce_sound): self.position = Vector2(position) self.speed = Vector2(speed) self.image = image self.bounce_sound = bounce_sound self.</description>
			<content type="html"><![CDATA[<p>在Pygame同样定义了特殊的模块<code>pygame.mixer</code>来播放声音效果。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">SCREEN_SIZE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">)</span>

<span class="c1"># 重力因子，实际上是单位 像素/平方秒</span>
<span class="n">GRAVITY</span> <span class="o">=</span> <span class="mf">250.0</span>
<span class="c1"># 弹力系数，不要超过1!</span>
<span class="n">BOUNCINESS</span> <span class="o">=</span> <span class="mf">0.7</span>

<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="kn">from</span> <span class="nn">gameobjects.vector2</span> <span class="kn">import</span> <span class="n">Vector2</span>

<span class="k">def</span> <span class="nf">stero_pan</span><span class="p">(</span><span class="n">x_coord</span><span class="p">,</span> <span class="n">screen_width</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;这个函数根据位置决定要播放声音左右声道的音量&#34;&#34;&#34;</span>
    <span class="n">right_volume</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">x_coord</span><span class="p">)</span> <span class="o">/</span> <span class="n">screen_width</span>
    <span class="n">left_volume</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="n">right_volume</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">left_volume</span><span class="p">,</span> <span class="n">right_volume</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Ball</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;小球类，实际上我们可以使用Sprite类来简化&#34;&#34;&#34;</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">speed</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="n">bounce_sound</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">bounce_sound</span> <span class="o">=</span> <span class="n">bounce_sound</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mf">0.0</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">time_passed</span><span class="p">):</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
        <span class="n">screen_width</span><span class="p">,</span> <span class="n">screen_height</span> <span class="o">=</span> <span class="n">SCREEN_SIZE</span>

        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span>
        <span class="n">x</span> <span class="o">-=</span> <span class="n">w</span><span class="o">/</span><span class="mi">2</span>
        <span class="n">y</span> <span class="o">-=</span> <span class="n">h</span><span class="o">/</span><span class="mi">2</span>
        <span class="c1"># 是不是要反弹了</span>
        <span class="n">bounce</span> <span class="o">=</span> <span class="bp">False</span>

        <span class="c1"># 小球碰壁了么？</span>
        <span class="k">if</span> <span class="n">y</span> <span class="o">+</span> <span class="n">h</span> <span class="o">&gt;=</span> <span class="n">screen_height</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">BOUNCINESS</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">screen_height</span> <span class="o">-</span> <span class="n">h</span> <span class="o">/</span> <span class="mf">2.0</span> <span class="o">-</span> <span class="mf">1.0</span>
            <span class="n">bounce</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">BOUNCINESS</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">w</span> <span class="o">/</span> <span class="mf">2.0</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="n">bounce</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">elif</span> <span class="n">x</span> <span class="o">+</span> <span class="n">w</span> <span class="o">&gt;=</span> <span class="n">screen_width</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">BOUNCINESS</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">screen_width</span> <span class="o">-</span> <span class="n">w</span> <span class="o">/</span> <span class="mf">2.0</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="n">bounce</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="c1"># 根据时间计算现在的位置，物理好的立刻发现这其实不标准，</span>
        <span class="c1"># 正规的应该是“s = 1/2*g*t*t”，不过这样省事省时一点，咱只是模拟~</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">*</span> <span class="n">time_passed</span>
        <span class="c1"># 根据重力计算速度</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">time_passed</span> <span class="o">*</span> <span class="n">GRAVITY</span>

        <span class="k">if</span> <span class="n">bounce</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">play_bounce_sound</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">+=</span> <span class="n">time_passed</span>

    <span class="k">def</span> <span class="nf">play_bounce_sound</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;这个就是播放声音的函数&#34;&#34;&#34;</span>
        <span class="n">channel</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">bounce_sound</span><span class="o">.</span><span class="n">play</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">channel</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># 设置左右声道的音量</span>
            <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">stero_pan</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">SCREEN_SIZE</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">channel</span><span class="o">.</span><span class="n">set_volume</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">):</span>
        <span class="c1"># 真有点麻烦了，有爱的，自己用Sprite改写下吧……</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span>
        <span class="n">x</span> <span class="o">-=</span> <span class="n">w</span><span class="o">/</span><span class="mi">2</span>
        <span class="n">y</span> <span class="o">-=</span> <span class="n">h</span><span class="o">/</span><span class="mi">2</span>
        <span class="n">surface</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>
    <span class="c1"># 上一次的内容</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">pre_init</span><span class="p">(</span><span class="mi">44100</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">set_num_channels</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
    <span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">(</span><span class="n">SCREEN_SIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="c1">#    pygame.mouse.set_visible(False)</span>
    <span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>

    <span class="n">ball_image</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;ball.png&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
    <span class="n">mouse_image</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;mousecursor.png&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>

    <span class="c1"># 加载声音文件</span>
    <span class="n">bounce_sound</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">Sound</span><span class="p">(</span><span class="s2">&#34;bounce.wav&#34;</span><span class="p">)</span>
    <span class="n">balls</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
                <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
                <span class="nb">exit</span><span class="p">()</span>
                <span class="k">return</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">MOUSEBUTTONDOWN</span><span class="p">:</span>
                <span class="c1"># 刚刚出来的小球，给一个随机的速度</span>
                <span class="n">random_speed</span> <span class="o">=</span> <span class="p">(</span> <span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">400</span><span class="p">,</span> <span class="mi">400</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">300</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">)</span>
                <span class="n">new_ball</span> <span class="o">=</span> <span class="n">Ball</span><span class="p">(</span> <span class="n">event</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span>
                                 <span class="n">random_speed</span><span class="p">,</span>
                                 <span class="n">ball_image</span><span class="p">,</span>
                                 <span class="n">bounce_sound</span> <span class="p">)</span>
                <span class="n">balls</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_ball</span><span class="p">)</span>

        <span class="n">time_passed_seconds</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span> <span class="o">/</span> <span class="mf">1000.</span>
        <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">((</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">))</span>
        <span class="c1"># 为防止小球太多，把超过寿命的小球加入这个“死亡名单”</span>
        <span class="n">dead_balls</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ball</span> <span class="ow">in</span> <span class="n">balls</span><span class="p">:</span>
            <span class="n">ball</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">time_passed_seconds</span><span class="p">)</span>
            <span class="n">ball</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">screen</span><span class="p">)</span>
            <span class="c1"># 每个小球的的寿命是10秒</span>
            <span class="k">if</span> <span class="n">ball</span><span class="o">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mf">10.0</span><span class="p">:</span>
                <span class="n">dead_balls</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ball</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">ball</span> <span class="ow">in</span> <span class="n">dead_balls</span><span class="p">:</span>
            <span class="n">balls</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">ball</span><span class="p">)</span>

        <span class="n">mouse_pos</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_pos</span><span class="p">()</span>
        <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">mouse_image</span><span class="p">,</span> <span class="n">mouse_pos</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">run</span><span class="p">()</span></code></pre></div>
<p><code>pygame.mixer</code>用于加载和播放声音，参考<a href="https://blog.csdn.net/qq_41556318/article/details/86304765">mixer模块</a>，特别是，创建新的Sound对象，并创建Channel对象控制播放。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">phaser_sound</span> <span class="o">=</span> <span class="n">Pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">Sound</span><span class="p">(</span><span class="s2">&#34;phaser.ogg&#34;</span><span class="p">)</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">phaser_sound</span><span class="o">.</span><span class="n">play</span><span class="p">()</span></code></pre></div>
<p>一个简单的播放器，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">SCREEN_SIZE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">600</span><span class="p">)</span>
<span class="c1"># 存放音乐文件的位置</span>
<span class="n">MUSIC_PATH</span> <span class="o">=</span> <span class="s2">&#34;./music&#34;</span>

<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">os.path</span>

<span class="k">def</span> <span class="nf">get_music</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>

    <span class="c1"># 从文件夹来读取所有的音乐文件</span>
    <span class="n">raw_filenames</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>

    <span class="n">music_files</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">raw_filenames</span><span class="p">:</span>
        <span class="c1"># 不是Windows的话，还是去掉mp3吧</span>
        <span class="k">if</span> <span class="n">filename</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.ogg&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">filename</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.mp3&#39;</span><span class="p">):</span>
            <span class="n">music_files</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">MUSIC_PATH</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span>

    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">music_files</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Button</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;这个类是一个按钮，具有自我渲染和判断是否被按上的功能&#34;&#34;&#34;</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image_filename</span><span class="p">,</span> <span class="n">position</span><span class="p">):</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">image_filename</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">):</span>
        <span class="c1"># 家常便饭的代码了</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
        <span class="n">x</span> <span class="o">-=</span> <span class="n">w</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="n">y</span> <span class="o">-=</span> <span class="n">h</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="n">surface</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">is_over</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">point</span><span class="p">):</span>
        <span class="c1"># 如果point在自身范围内，返回True</span>
        <span class="n">point_x</span><span class="p">,</span> <span class="n">point_y</span> <span class="o">=</span> <span class="n">point</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
        <span class="n">x</span> <span class="o">-=</span> <span class="n">w</span> <span class="o">/</span><span class="mi">2</span>
        <span class="n">y</span> <span class="o">-=</span> <span class="n">h</span> <span class="o">/</span> <span class="mi">2</span>

        <span class="n">in_x</span> <span class="o">=</span> <span class="n">point_x</span> <span class="o">&gt;=</span> <span class="n">x</span> <span class="ow">and</span> <span class="n">point_x</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">w</span>
        <span class="n">in_y</span> <span class="o">=</span> <span class="n">point_y</span> <span class="o">&gt;=</span> <span class="n">y</span> <span class="ow">and</span> <span class="n">point_y</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">+</span> <span class="n">h</span>
        <span class="k">return</span> <span class="n">in_x</span> <span class="ow">and</span> <span class="n">in_y</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>

    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">pre_init</span><span class="p">(</span><span class="mi">44100</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
    <span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">(</span><span class="n">SCREEN_SIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>     

    <span class="n">default_font</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">font</span><span class="o">.</span><span class="n">get_default_font</span><span class="p">()</span>
    <span class="n">font</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">font</span><span class="o">.</span><span class="n">SysFont</span><span class="p">(</span><span class="s2">&#34;default_font&#34;</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>   

    <span class="n">x</span> <span class="o">=</span> <span class="mi">100</span>
    <span class="n">y</span> <span class="o">=</span> <span class="mi">240</span>
    <span class="n">button_width</span> <span class="o">=</span> <span class="mi">150</span>
    <span class="n">buttons</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">buttons</span><span class="p">[</span><span class="s2">&#34;prev&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="s2">&#34;prev.png&#34;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
    <span class="n">buttons</span><span class="p">[</span><span class="s2">&#34;pause&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="s2">&#34;pause.png&#34;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">button_width</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
    <span class="n">buttons</span><span class="p">[</span><span class="s2">&#34;stop&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="s2">&#34;stop.png&#34;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">button_width</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
    <span class="n">buttons</span><span class="p">[</span><span class="s2">&#34;play&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="s2">&#34;play.png&#34;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">button_width</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
    <span class="n">buttons</span><span class="p">[</span><span class="s2">&#34;next&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="s2">&#34;next.png&#34;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">button_width</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>

    <span class="n">music_filenames</span> <span class="o">=</span> <span class="n">get_music</span><span class="p">(</span><span class="n">MUSIC_PATH</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">music_filenames</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;No music files found in &#34;</span><span class="p">,</span> <span class="n">MUSIC_PATH</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="n">white</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
    <span class="n">label_surfaces</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># 一系列的文件名render</span>
    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">music_filenames</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">filename</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;Track:&#34;</span><span class="p">,</span> <span class="n">txt</span><span class="p">)</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">txt</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">surface</span> <span class="o">=</span> <span class="n">font</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">txt</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
        <span class="n">label_surfaces</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>

    <span class="n">current_track</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">max_tracks</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">music_filenames</span><span class="p">)</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">music_filenames</span><span class="p">[</span><span class="n">current_track</span><span class="p">]</span> <span class="p">)</span>  

    <span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
    <span class="n">playing</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">paused</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="c1">#创建用户事件</span>
    <span class="n">TRACK_END</span> <span class="o">=</span> <span class="n">USEREVENT</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">set_endevent</span><span class="p">(</span><span class="n">TRACK_END</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>

        <span class="n">button_pressed</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
                <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
                <span class="nb">exit</span><span class="p">()</span>

            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">MOUSEBUTTONDOWN</span><span class="p">:</span>

                <span class="c1"># 判断哪个按钮被按下</span>
                <span class="k">for</span> <span class="n">button_name</span><span class="p">,</span> <span class="n">button</span> <span class="ow">in</span> <span class="n">buttons</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
                    <span class="k">if</span> <span class="n">button</span><span class="o">.</span><span class="n">is_over</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">pos</span><span class="p">):</span>
                        <span class="k">print</span><span class="p">(</span><span class="n">button_name</span><span class="p">,</span> <span class="s2">&#34;pressed&#34;</span><span class="p">)</span>
                        <span class="n">button_pressed</span> <span class="o">=</span> <span class="n">button_name</span>
                        <span class="k">break</span>

            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">TRACK_END</span><span class="p">:</span>
                <span class="c1"># 如果一曲播放结束，就“模拟”按下&#34;next&#34;</span>
                <span class="n">button_pressed</span> <span class="o">=</span> <span class="s2">&#34;next&#34;</span>

        <span class="k">if</span> <span class="n">button_pressed</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>

            <span class="k">if</span> <span class="n">button_pressed</span> <span class="o">==</span> <span class="s2">&#34;next&#34;</span><span class="p">:</span>
                <span class="n">current_track</span> <span class="o">=</span> <span class="p">(</span><span class="n">current_track</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">max_tracks</span>
                <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">music_filenames</span><span class="p">[</span><span class="n">current_track</span><span class="p">]</span> <span class="p">)</span>
                <span class="k">if</span> <span class="n">playing</span><span class="p">:</span>
                    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">play</span><span class="p">()</span>

            <span class="k">elif</span> <span class="n">button_pressed</span> <span class="o">==</span> <span class="s2">&#34;prev&#34;</span><span class="p">:</span>

                <span class="c1"># prev的处理方法：</span>
                <span class="c1"># 已经播放超过3秒，从头开始，否则就播放上一曲</span>
                <span class="k">if</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">get_pos</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="p">:</span>
                    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
                    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">play</span><span class="p">()</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">current_track</span> <span class="o">=</span> <span class="p">(</span><span class="n">current_track</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">max_tracks</span>
                    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">music_filenames</span><span class="p">[</span><span class="n">current_track</span><span class="p">]</span> <span class="p">)</span>
                    <span class="k">if</span> <span class="n">playing</span><span class="p">:</span>
                        <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">play</span><span class="p">()</span>

            <span class="k">elif</span> <span class="n">button_pressed</span> <span class="o">==</span> <span class="s2">&#34;pause&#34;</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">paused</span><span class="p">:</span>
                    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">unpause</span><span class="p">()</span>
                    <span class="n">paused</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">pause</span><span class="p">()</span>
                    <span class="n">paused</span> <span class="o">=</span> <span class="bp">True</span>

            <span class="k">elif</span> <span class="n">button_pressed</span> <span class="o">==</span> <span class="s2">&#34;stop&#34;</span><span class="p">:</span>
                <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
                <span class="n">playing</span> <span class="o">=</span> <span class="bp">False</span>

            <span class="k">elif</span> <span class="n">button_pressed</span> <span class="o">==</span> <span class="s2">&#34;play&#34;</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">paused</span><span class="p">:</span>
                    <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">unpause</span><span class="p">()</span>
                    <span class="n">paused</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="n">playing</span><span class="p">:</span>
                        <span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">music</span><span class="o">.</span><span class="n">play</span><span class="p">()</span>
                        <span class="n">playing</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">white</span><span class="p">)</span>

        <span class="c1"># 写一下当前歌名</span>
        <span class="n">label</span> <span class="o">=</span> <span class="n">label_surfaces</span><span class="p">[</span><span class="n">current_track</span><span class="p">]</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">label</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
        <span class="n">screen_w</span> <span class="o">=</span> <span class="n">SCREEN_SIZE</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="p">((</span><span class="n">screen_w</span> <span class="o">-</span> <span class="n">w</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">450</span><span class="p">))</span>

        <span class="c1"># 画所有按钮</span>
        <span class="k">for</span> <span class="n">button</span> <span class="ow">in</span> <span class="n">buttons</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
            <span class="n">button</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">screen</span><span class="p">)</span>

        <span class="c1"># 因为基本是不动的，这里帧率设的很低</span>
        <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>

    <span class="n">run</span><span class="p">()</span></code></pre></div>
<p>混音器还有一个特殊的通道用于音乐播放，可通过 <a href="http://www.pygame.org/docs/ref/music.html">pygame.mixer.music </a>模块访问。</p>
]]></content>
		</item>
		
		<item>
			<title>Pygame:Artificial_Intelligence</title>
			<link>https://boseliao.github.io/posts/pygameartificial_intelligence/</link>
			<pubDate>Mon, 27 Jul 2020 10:10:38 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/pygameartificial_intelligence/</guid>
			<description>游戏中的人工智能是一种错觉（现实生活中也可能如此）。创建这种错觉的代码与前几章中的代码没有太大区别。我们将使用Python字符串、列表、字典等基本工具来构建类，这些类实际上是NPC(nonplayer characters)的大脑。实际上，Python可能是编写AI的最佳语言之一，因为它有大量的内置对象。
首先我们构造一个游戏世界
#建立世界类 class World(object): def __init__(self): self.entities = {} self.entity_id = 0 self.background = pygame.surface.Surface(SCREEN_SIZE).convert() self.background.fill((255, 255, 255)) pygame.draw.circle(self.background, (200, 255, 200), NEST_POSITION, int(NEST_SIZE)) #add and remove entity  def add_entity(self, entity): self.entities[self.entity_id] = entity entity.id = self.entity_id self.entity_id += 1 def remove_entity(self, entity): del self.entities[entity.id] #通过id得到实体 def get(self, entity_id): if entity_id in self.entities: return self.entities[entity_id] else: return None #entity process def process(self, time_passed): time_passed_seconds = time_passed / 1000.</description>
			<content type="html"><![CDATA[<p>游戏中的人工智能是一种错觉（现实生活中也可能如此）。创建这种错觉的代码与前几章中的代码没有太大区别。我们将使用Python字符串、列表、字典等基本工具来构建类，这些类实际上是NPC(nonplayer characters)的大脑。实际上，Python可能是编写AI的最佳语言之一，因为它有大量的内置对象。</p>

<p>首先我们构造一个游戏世界</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#建立世界类</span>
<span class="k">class</span> <span class="nc">World</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">entities</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">entity_id</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">background</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">surface</span><span class="o">.</span><span class="n">Surface</span><span class="p">(</span><span class="n">SCREEN_SIZE</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">background</span><span class="o">.</span><span class="n">fill</span><span class="p">((</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">))</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">background</span><span class="p">,</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="n">NEST_POSITION</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">NEST_SIZE</span><span class="p">))</span>
 	
    <span class="c1">#add and remove entity </span>
    <span class="k">def</span> <span class="nf">add_entity</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">entity</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">entities</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">entity_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">entity</span>
        <span class="n">entity</span><span class="o">.</span><span class="nb">id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_id</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">entity_id</span> <span class="o">+=</span> <span class="mi">1</span>
 
    <span class="k">def</span> <span class="nf">remove_entity</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">entity</span><span class="p">):</span>
        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">entities</span><span class="p">[</span><span class="n">entity</span><span class="o">.</span><span class="nb">id</span><span class="p">]</span>
 
    <span class="c1">#通过id得到实体</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">entity_id</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">entity_id</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">entities</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">entities</span><span class="p">[</span><span class="n">entity_id</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
	
    <span class="c1">#entity process</span>
    <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">time_passed</span><span class="p">):</span>
        <span class="n">time_passed_seconds</span> <span class="o">=</span> <span class="n">time_passed</span> <span class="o">/</span> <span class="mf">1000.0</span>
        <span class="k">for</span> <span class="n">entity</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">entities</span><span class="o">.</span><span class="n">values</span><span class="p">()):</span>
            <span class="n">entity</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">time_passed_seconds</span><span class="p">)</span>
 
	<span class="c1">#entity render</span>
    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">):</span>
        <span class="n">surface</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">background</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">entity</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">entities</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
            <span class="n">entity</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">surface</span><span class="p">)</span>
 
	<span class="c1">#finds an entity that is within a certain distance of a location in the world</span>
    <span class="k">def</span> <span class="nf">get_close_entity</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">location</span><span class="p">,</span> <span class="nb">range</span><span class="o">=</span><span class="mf">100.</span><span class="p">):</span>
        <span class="n">location</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="o">*</span><span class="n">location</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">entity</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">entities</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">entity</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">name</span><span class="p">:</span>
                <span class="n">distance</span> <span class="o">=</span> <span class="n">location</span><span class="o">.</span><span class="n">get_distance_to</span><span class="p">(</span><span class="n">entity</span><span class="o">.</span><span class="n">location</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">distance</span> <span class="o">&lt;</span> <span class="nb">range</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">entity</span>
        <span class="k">return</span> <span class="bp">None</span></code></pre></div>
<p>可以看到在这个游戏世界里，我们创建了属性游戏实体(entities)和背景(background)，以及创建，删除，游戏进程，并画出实体的方法。最后定义了发现一个实体到某一点的距离，在更加复杂的游戏中，将这重构为一个游戏函数会更加合理。在进程中我们调用了<code>entity.process</code>，所以我们还要创建entity类。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#建立游戏实体类</span>
<span class="k">class</span> <span class="nc">GameEntity</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
 
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">image</span><span class="p">):</span>
 
        <span class="bp">self</span><span class="o">.</span><span class="n">world</span> <span class="o">=</span> <span class="n">world</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">0.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">brain</span> <span class="o">=</span> <span class="n">StateMachine</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="nb">id</span> <span class="o">=</span> <span class="mi">0</span>
 
    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
        <span class="n">surface</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>   
 
    <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">time_passed</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">brain</span><span class="o">.</span><span class="n">think</span><span class="p">()</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">&gt;</span> <span class="mf">0.</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">destination</span><span class="p">:</span>
            <span class="n">vec_to_destination</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">destination</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span>
            <span class="n">distance_to_destination</span> <span class="o">=</span> <span class="n">vec_to_destination</span><span class="o">.</span><span class="n">get_length</span><span class="p">()</span>
            <span class="n">heading</span> <span class="o">=</span> <span class="n">vec_to_destination</span><span class="o">.</span><span class="n">normalize</span><span class="p">()</span>
            <span class="n">travel_distance</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">distance_to_destination</span><span class="p">,</span> <span class="n">time_passed</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">location</span> <span class="o">+=</span> <span class="n">travel_distance</span> <span class="o">*</span> <span class="n">heading</span></code></pre></div>
<p>这里定义的游戏实体的总类，包含了实体通用的行为函数，用于被具体的实体类继承。三个游戏实体，ant，leaf和spider</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Leaf</span><span class="p">(</span><span class="n">GameEntity</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="n">image</span><span class="p">):</span>
        <span class="n">GameEntity</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="s2">&#34;leaf&#34;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
 
<span class="k">class</span> <span class="nc">Spider</span><span class="p">(</span><span class="n">GameEntity</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="n">image</span><span class="p">):</span>
        <span class="n">GameEntity</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="s2">&#34;spider&#34;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dead_image</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">transform</span><span class="o">.</span><span class="n">flip</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">health</span> <span class="o">=</span> <span class="mi">25</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">50.</span> <span class="o">+</span> <span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
 
    <span class="k">def</span> <span class="nf">bitten</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">health</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">0.</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dead_image</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">140.</span>
 
    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">):</span>
        <span class="n">GameEntity</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">)</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
        <span class="c1">#描绘血条</span>
        <span class="n">bar_x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="mf">25.</span><span class="o">/</span><span class="mf">2.</span>
        <span class="n">bar_y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">h</span><span class="o">/</span><span class="mi">2</span>
        <span class="n">surface</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">bar_x</span><span class="p">,</span> <span class="n">bar_y</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="n">surface</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">bar_x</span><span class="p">,</span> <span class="n">bar_y</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">health</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
 
    <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">time_passed</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span>
        <span class="c1">#当spyder移出屏幕，删除；否则前进</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">SCREEN_SIZE</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">remove_entity</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">GameEntity</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">time_passed</span><span class="p">)</span>
 
<span class="k">class</span> <span class="nc">Ant</span><span class="p">(</span><span class="n">GameEntity</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="n">image</span><span class="p">):</span>
        <span class="n">GameEntity</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="s2">&#34;ant&#34;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
        <span class="n">exploring_state</span> <span class="o">=</span> <span class="n">AntStateExploring</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="n">seeking_state</span> <span class="o">=</span> <span class="n">AntStateSeeking</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="n">delivering_state</span> <span class="o">=</span> <span class="n">AntStateDelivering</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="n">hunting_state</span> <span class="o">=</span> <span class="n">AntStateHunting</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="c1">#将四个状态添加进ant的状态机</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">brain</span><span class="o">.</span><span class="n">add_state</span><span class="p">(</span><span class="n">exploring_state</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">brain</span><span class="o">.</span><span class="n">add_state</span><span class="p">(</span><span class="n">seeking_state</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">brain</span><span class="o">.</span><span class="n">add_state</span><span class="p">(</span><span class="n">delivering_state</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">brain</span><span class="o">.</span><span class="n">add_state</span><span class="p">(</span><span class="n">hunting_state</span><span class="p">)</span>
        <span class="c1">#ant背着的东西</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span> <span class="o">=</span> <span class="bp">None</span>
 
    <span class="k">def</span> <span class="nf">carry</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span> <span class="o">=</span> <span class="n">image</span>
 
    <span class="c1">#ant丢下东西</span>
    <span class="k">def</span> <span class="nf">drop</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span><span class="p">:</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span>
            <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
            <span class="n">surface</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">w</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span> <span class="o">=</span> <span class="bp">None</span>
 
    <span class="c1">#画ant和叶子或蜘蛛</span>
    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">):</span>
        <span class="n">GameEntity</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">surface</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span><span class="p">:</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span>
            <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
            <span class="n">surface</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">carry_image</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">w</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span></code></pre></div>
<p>考虑一个简单的模型，具有四种状态的ant，&rdquo;exploring&rdquo;(没有检索到玩家)，&rdquo;seeking&rdquo;(检索到玩家)，&rdquo;delivering&rdquo;(运输物资)和&rdquo;hunting&rdquo;(狩猎)。游戏中，通过构造状态机来描述，状态的描述基于以下两个标准</p>

<ul>
<li>NPC当下在做什么</li>
<li>在什么情况下，状态将会改变</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#建立state类 </span>
<span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="k">def</span> <span class="nf">do_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">check_conditions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">entry_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">exit_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>        

<span class="c1">#建立状态机类 </span>
<span class="k">class</span> <span class="nc">StateMachine</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">states</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span> <span class="o">=</span> <span class="bp">None</span>
 
    <span class="k">def</span> <span class="nf">add_state</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">states</span><span class="p">[</span><span class="n">state</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span>
 
    <span class="k">def</span> <span class="nf">think</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span><span class="o">.</span><span class="n">do_actions</span><span class="p">()</span>
        <span class="n">new_state_name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span><span class="o">.</span><span class="n">check_conditions</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">new_state_name</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">set_state</span><span class="p">(</span><span class="n">new_state_name</span><span class="p">)</span>
 
    <span class="k">def</span> <span class="nf">set_state</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_state_name</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span><span class="o">.</span><span class="n">exit_actions</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">states</span><span class="p">[</span><span class="n">new_state_name</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">active_state</span><span class="o">.</span><span class="n">entry_actions</span><span class="p">()</span></code></pre></div>
<p>实体的具体状态类的定义</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">AntStateExploring</span><span class="p">(</span><span class="n">State</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ant</span><span class="p">):</span>
        <span class="n">State</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s2">&#34;exploring&#34;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span> <span class="o">=</span> <span class="n">ant</span>
 
    <span class="k">def</span> <span class="nf">random_destination</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">SCREEN_SIZE</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>    
 
    <span class="k">def</span> <span class="nf">do_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">random_destination</span><span class="p">()</span>
 
    <span class="k">def</span> <span class="nf">check_conditions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">leaf</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">get_close_entity</span><span class="p">(</span><span class="s2">&#34;leaf&#34;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">location</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">leaf</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">leaf_id</span> <span class="o">=</span> <span class="n">leaf</span><span class="o">.</span><span class="nb">id</span>
            <span class="k">return</span> <span class="s2">&#34;seeking&#34;</span>
        <span class="n">spider</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">get_close_entity</span><span class="p">(</span><span class="s2">&#34;spider&#34;</span><span class="p">,</span> <span class="n">NEST_POSITION</span><span class="p">,</span> <span class="n">NEST_SIZE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">spider</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">get_distance</span><span class="p">(</span><span class="n">spider</span><span class="o">.</span><span class="n">location</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">100.</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">spider_id</span> <span class="o">=</span> <span class="n">spider</span><span class="o">.</span><span class="nb">id</span>
                <span class="k">return</span> <span class="s2">&#34;hunting&#34;</span>
        <span class="k">return</span> <span class="bp">None</span>
 
    <span class="c1">#进入exploring状态</span>
    <span class="k">def</span> <span class="nf">entry_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">120.</span> <span class="o">+</span> <span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">random_destination</span><span class="p">()</span>
 
<span class="k">class</span> <span class="nc">AntStateSeeking</span><span class="p">(</span><span class="n">State</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ant</span><span class="p">):</span>
        <span class="n">State</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s2">&#34;seeking&#34;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span> <span class="o">=</span> <span class="n">ant</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">leaf_id</span> <span class="o">=</span> <span class="bp">None</span>
 
    <span class="k">def</span> <span class="nf">check_conditions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">leaf</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">leaf_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">leaf</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;exploring&#34;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">get_distance_to</span><span class="p">(</span><span class="n">leaf</span><span class="o">.</span><span class="n">location</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">carry</span><span class="p">(</span><span class="n">leaf</span><span class="o">.</span><span class="n">image</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">remove_entity</span><span class="p">(</span><span class="n">leaf</span><span class="p">)</span>
            <span class="k">return</span> <span class="s2">&#34;delivering&#34;</span>
        <span class="k">return</span> <span class="bp">None</span>
 
    <span class="k">def</span> <span class="nf">entry_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">leaf</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">leaf_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">leaf</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">leaf</span><span class="o">.</span><span class="n">location</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">160.</span> <span class="o">+</span> <span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
 
<span class="k">class</span> <span class="nc">AntStateDelivering</span><span class="p">(</span><span class="n">State</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ant</span><span class="p">):</span>
        <span class="n">State</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s2">&#34;delivering&#34;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span> <span class="o">=</span> <span class="n">ant</span>
 
    <span class="k">def</span> <span class="nf">check_conditions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">Vector2</span><span class="p">(</span><span class="o">*</span><span class="n">NEST_POSITION</span><span class="p">)</span><span class="o">.</span><span class="n">get_distance_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">location</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">NEST_SIZE</span><span class="p">:</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">background</span><span class="p">)</span>
                <span class="k">return</span> <span class="s2">&#34;exploring&#34;</span>
        <span class="k">return</span> <span class="bp">None</span>
 
    <span class="k">def</span> <span class="nf">entry_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">60.</span>
        <span class="n">random_offset</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="o">*</span><span class="n">NEST_POSITION</span><span class="p">)</span> <span class="o">+</span> <span class="n">random_offset</span>       
 
<span class="k">class</span> <span class="nc">AntStateHunting</span><span class="p">(</span><span class="n">State</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ant</span><span class="p">):</span>
        <span class="n">State</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s2">&#34;hunting&#34;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span> <span class="o">=</span> <span class="n">ant</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">got_kill</span> <span class="o">=</span> <span class="bp">False</span>
 
    <span class="k">def</span> <span class="nf">do_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">spider</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">spider_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">spider</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">spider</span><span class="o">.</span><span class="n">location</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">get_distance_to</span><span class="p">(</span><span class="n">spider</span><span class="o">.</span><span class="n">location</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">15.</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">spider</span><span class="o">.</span><span class="n">bitten</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">spider</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">carry</span><span class="p">(</span><span class="n">spider</span><span class="o">.</span><span class="n">image</span><span class="p">)</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">remove_entity</span><span class="p">(</span><span class="n">spider</span><span class="p">)</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">got_kill</span> <span class="o">=</span> <span class="bp">True</span>
 
    <span class="k">def</span> <span class="nf">check_conditions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">got_kill</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;delivering&#34;</span>
        <span class="n">spider</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">world</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ant</span><span class="o">.</span><span class="n">spider_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">spider</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;exploring&#34;</span>
        <span class="k">if</span> <span class="n">spider</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">get_distance_to</span><span class="p">(</span><span class="n">NEST_POSITION</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">NEST_SIZE</span> <span class="o">*</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;exploring&#34;</span>
        <span class="k">return</span> <span class="bp">None</span>
 
    <span class="k">def</span> <span class="nf">entry_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">160.</span> <span class="o">+</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
 
    <span class="k">def</span> <span class="nf">exit_actions</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">got_kill</span> <span class="o">=</span> <span class="bp">False</span></code></pre></div>
<p>主程序</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#运行主程序</span>
<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
    <span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">(</span><span class="n">SCREEN_SIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
    <span class="n">world</span> <span class="o">=</span> <span class="n">World</span><span class="p">()</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">SCREEN_SIZE</span>
    <span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
    <span class="n">ant_image</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;ant.png&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
    <span class="n">leaf_image</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;leaf.png&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
    <span class="n">spider_image</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;spider.png&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
 
    <span class="k">for</span> <span class="n">ant_no</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ANT_COUNT</span><span class="p">):</span>
        <span class="n">ant</span> <span class="o">=</span> <span class="n">Ant</span><span class="p">(</span><span class="n">world</span><span class="p">,</span> <span class="n">ant_image</span><span class="p">)</span>
        <span class="n">ant</span><span class="o">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">Vec2d</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
        <span class="n">ant</span><span class="o">.</span><span class="n">brain</span><span class="o">.</span><span class="n">set_state</span><span class="p">(</span><span class="s2">&#34;exploring&#34;</span><span class="p">)</span>
        <span class="n">world</span><span class="o">.</span><span class="n">add_entity</span><span class="p">(</span><span class="n">ant</span><span class="p">)</span>
 
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
                <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
                <span class="nb">exit</span><span class="p">()</span>
        <span class="n">time_passed</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
 
        <span class="k">if</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">leaf</span> <span class="o">=</span> <span class="n">Leaf</span><span class="p">(</span><span class="n">world</span><span class="p">,</span> <span class="n">leaf_image</span><span class="p">)</span>
            <span class="n">leaf</span><span class="o">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">Vec2d</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
            <span class="n">world</span><span class="o">.</span><span class="n">add_entity</span><span class="p">(</span><span class="n">leaf</span><span class="p">)</span>
 
        <span class="k">if</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">spider</span> <span class="o">=</span> <span class="n">Spider</span><span class="p">(</span><span class="n">world</span><span class="p">,</span> <span class="n">spider_image</span><span class="p">)</span>
            <span class="n">spider</span><span class="o">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">Vec2d</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="p">,</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
            <span class="n">spider</span><span class="o">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">Vec2d</span><span class="p">(</span><span class="n">w</span><span class="o">+</span><span class="mi">50</span><span class="p">,</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
            <span class="n">world</span><span class="o">.</span><span class="n">add_entity</span><span class="p">(</span><span class="n">spider</span><span class="p">)</span>
 
        <span class="n">world</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">time_passed</span><span class="p">)</span>
        <span class="n">world</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">screen</span><span class="p">)</span>
 
        <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>
 
<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">run</span><span class="p">()</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Pygame:user_control</title>
			<link>https://boseliao.github.io/posts/pygameuser_control/</link>
			<pubDate>Sun, 26 Jul 2020 12:15:43 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/pygameuser_control/</guid>
			<description>这里我们主要考虑用户使用键盘与鼠标，与游戏进行交互。
键盘控制 利用键盘控制物体移动，
import pygame from pygame.locals import * from sys import exit background_image_filename=&amp;#39;sushiplate.jpg&amp;#39; screen = pygame.display.set_mode((640,480),0,32) background = pygame.image.load(background_image_filename).convert() x,y=0,0 move_x,move_y=0,0 while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() if event.type == KEYDOWN: if event.key == K_LEFT: move_x = -1 elif event.key == K_RIGHT: move_x = 1 elif event.key == K_UP: move_y = 1 elif event.key == K_DOWN: move_y = -1 elif event.type == KEYUP: move_x=0 move_y=0 x+= move_x y+= move_y screen.</description>
			<content type="html"><![CDATA[

<p>这里我们主要考虑用户使用键盘与鼠标，与游戏进行交互。</p>

<h2 id="键盘控制">键盘控制</h2>

<p>利用键盘控制物体移动，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pygame</span>

<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="n">background_image_filename</span><span class="o">=</span><span class="s1">&#39;sushiplate.jpg&#39;</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span><span class="mi">480</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
<span class="n">background</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">background_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>

<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
<span class="n">move_x</span><span class="p">,</span><span class="n">move_y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">KEYDOWN</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">K_LEFT</span><span class="p">:</span>
                <span class="n">move_x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">K_RIGHT</span><span class="p">:</span>
                <span class="n">move_x</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">K_UP</span><span class="p">:</span>
                <span class="n">move_y</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">K_DOWN</span><span class="p">:</span>
                <span class="n">move_y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">KEYUP</span><span class="p">:</span>
            <span class="n">move_x</span><span class="o">=</span><span class="mi">0</span>
            <span class="n">move_y</span><span class="o">=</span><span class="mi">0</span>
            
    <span class="n">x</span><span class="o">+=</span> <span class="n">move_x</span>
    <span class="n">y</span><span class="o">+=</span> <span class="n">move_y</span>
    
    <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">background</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
    
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p>其中，<code>KEYDOWN</code>和<code>KEYUP</code>分别用来检测来自键盘的是否按下的信号。对于更具体的知道哪个键被按下，可以调用<code>pygame.key</code>模块，用<code>key_a----key_z</code>和<code>key_0---key_9</code>表示字母和数字，类似的也可以表达方向键等。但这个程序里的物体只能一下一下的动，为了使其连续移动</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">background_image_filename</span> <span class="o">=</span> <span class="s1">&#39;sushiplate.jpg&#39;</span>
<span class="n">sprite_image_filename</span> <span class="o">=</span> <span class="s1">&#39;fugu.png&#39;</span>
 
<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="kn">from</span> <span class="nn">gameobjects.vector</span> <span class="kn">import</span> <span class="n">Vector2</span>
 
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
 
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
 
<span class="n">background</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">background_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
<span class="n">sprite</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">sprite_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
 
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
 
<span class="n">sprite_pos</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">150</span><span class="p">)</span>
<span class="n">sprite_speed</span> <span class="o">=</span> <span class="mf">300.</span>
 
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
 
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
 
    <span class="n">pressed_keys</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">get_pressed</span><span class="p">()</span>
 
    <span class="n">key_direction</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_LEFT</span><span class="p">]:</span>
        <span class="n">key_direction</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">elif</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_RIGHT</span><span class="p">]:</span>
        <span class="n">key_direction</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">+</span><span class="mi">1</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_UP</span><span class="p">]:</span>
        <span class="n">key_direction</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">elif</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_DOWN</span><span class="p">]:</span>
        <span class="n">key_direction</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">+</span><span class="mi">1</span>
 
    <span class="n">key_direction</span><span class="o">.</span><span class="n">normalize</span><span class="p">()</span>
 
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">background</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="n">sprite_pos</span><span class="p">)</span>
 
    <span class="n">time_passed</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">time_passed_seconds</span> <span class="o">=</span> <span class="n">time_passed</span> <span class="o">/</span> <span class="mf">1000.0</span>
 
    <span class="n">sprite_pos</span><span class="o">+=</span> <span class="n">key_direction</span> <span class="o">*</span> <span class="n">sprite_speed</span> <span class="o">*</span> <span class="n">time_passed_seconds</span>
 
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p>检测并输出按键，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pygame</span>

<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>

<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span><span class="mi">480</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>

<span class="n">font</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">font</span><span class="o">.</span><span class="n">SysFont</span><span class="p">(</span><span class="s2">&#34;arial&#34;</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
<span class="n">font_height</span> <span class="o">=</span> <span class="n">font</span><span class="o">.</span><span class="n">get_linesize</span><span class="p">()</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
            
    <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">((</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">))</span>
    
    <span class="n">pressed_key_text</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">pressed_keys</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">get_pressed</span><span class="p">()</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">font_height</span>
    
    <span class="k">for</span> <span class="n">key_constant</span><span class="p">,</span><span class="n">pressed</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">pressed_keys</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">pressed</span><span class="p">:</span>
            <span class="n">key_name</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">name</span><span class="p">(</span><span class="n">key_constant</span><span class="p">)</span>
            <span class="n">text_surface</span> <span class="o">=</span> <span class="n">font</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">key_name</span><span class="o">+</span><span class="s2">&#34;pressed&#34;</span><span class="p">,</span><span class="bp">True</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
            <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">text_surface</span><span class="p">,(</span><span class="mi">8</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
            <span class="n">y</span><span class="o">+=</span> <span class="n">font_height</span>
            
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p>这里主要用了<code>pygame.key</code>模块的一些方法进行按键的检测，具体可以参考<a href="https://blog.csdn.net/qq_41556318/article/details/86304649">key模块</a></p>

<p>键盘控制旋转</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">background_image_filename</span> <span class="o">=</span> <span class="s1">&#39;sushiplate.jpg&#39;</span>
<span class="n">sprite_image_filename</span> <span class="o">=</span> <span class="s1">&#39;fugu.png&#39;</span>
 
<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="kn">from</span> <span class="nn">gameobjects.vector</span> <span class="kn">import</span> <span class="n">Vector2</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span>
 
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
 
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
 
<span class="n">background</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">background_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
<span class="n">sprite</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">sprite_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
 
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
 
<span class="n">sprite_pos</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">150</span><span class="p">)</span>   <span class="c1"># 初始位置</span>
<span class="n">sprite_speed</span> <span class="o">=</span> <span class="mf">300.</span>     <span class="c1"># 每秒前进的像素数（速度）</span>
<span class="n">sprite_rotation</span> <span class="o">=</span> <span class="mf">0.</span>      <span class="c1"># 初始角度</span>
<span class="n">sprite_rotation_speed</span> <span class="o">=</span> <span class="mf">360.</span> <span class="c1"># 每秒转动的角度数（转速）</span>
 
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
 
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
 
    <span class="n">pressed_keys</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">get_pressed</span><span class="p">()</span>
 
    <span class="n">rotation_direction</span> <span class="o">=</span> <span class="mf">0.</span>
    <span class="n">movement_direction</span> <span class="o">=</span> <span class="mf">0.</span>
 
    <span class="c1"># 更改角度</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_LEFT</span><span class="p">]:</span>
        <span class="n">rotation_direction</span> <span class="o">=</span> <span class="o">+</span><span class="mf">1.</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_RIGHT</span><span class="p">]:</span>
        <span class="n">rotation_direction</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.</span>
    <span class="c1"># 前进、后退</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_UP</span><span class="p">]:</span>
        <span class="n">movement_direction</span> <span class="o">=</span> <span class="o">+</span><span class="mf">1.</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_DOWN</span><span class="p">]:</span>
        <span class="n">movement_direction</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.</span>
 
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">background</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
 
    <span class="c1"># 获得一条转向后的鱼</span>
    <span class="n">rotated_sprite</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">transform</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="n">sprite_rotation</span><span class="p">)</span>
    <span class="c1"># 转向后，图片的长宽会变化，因为图片永远是矩形，为了放得下一个转向后的矩形，外接的矩形势必会比较大</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">rotated_sprite</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
    <span class="c1"># 获得绘制图片的左上角</span>
    <span class="n">sprite_draw_pos</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">sprite_pos</span><span class="o">.</span><span class="n">x</span><span class="o">-</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">sprite_pos</span><span class="o">.</span><span class="n">y</span><span class="o">-</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">rotated_sprite</span><span class="p">,</span> <span class="n">sprite_draw_pos</span><span class="p">)</span>
 
    <span class="n">time_passed</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
    <span class="n">time_passed_seconds</span> <span class="o">=</span> <span class="n">time_passed</span> <span class="o">/</span> <span class="mf">1000.0</span>
 
    <span class="c1"># 图片的转向速度也需要和行进速度一样，通过时间来控制</span>
    <span class="n">sprite_rotation</span> <span class="o">+=</span> <span class="n">rotation_direction</span> <span class="o">*</span> <span class="n">sprite_rotation_speed</span> <span class="o">*</span> <span class="n">time_passed_seconds</span>
 
    <span class="c1"># 获得前进（x方向和y方向），这两个需要一点点三角的知识</span>
    <span class="n">heading_x</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">sprite_rotation</span><span class="o">*</span><span class="n">pi</span><span class="o">/</span><span class="mf">180.</span><span class="p">)</span>
    <span class="n">heading_y</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="n">sprite_rotation</span><span class="o">*</span><span class="n">pi</span><span class="o">/</span><span class="mf">180.</span><span class="p">)</span>
    <span class="c1"># 转换为单位速度向量</span>
    <span class="n">heading</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">heading_x</span><span class="p">,</span> <span class="n">heading_y</span><span class="p">)</span>
    <span class="c1"># 转换为速度</span>
    <span class="n">heading</span> <span class="o">*=</span> <span class="n">movement_direction</span>
 
    <span class="n">sprite_pos</span><span class="o">+=</span> <span class="n">heading</span> <span class="o">*</span> <span class="n">sprite_speed</span> <span class="o">*</span> <span class="n">time_passed_seconds</span>
 
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<h3 id="鼠标控制">鼠标控制</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">background_image_filename</span> <span class="o">=</span> <span class="s1">&#39;sushiplate.jpg&#39;</span>
<span class="n">sprite_image_filename</span> <span class="o">=</span> <span class="s1">&#39;fugu.png&#39;</span>
 
<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="kn">from</span> <span class="nn">gameobjects.vector</span> <span class="kn">import</span> <span class="n">Vector2</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span>
 
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
 
<span class="n">background</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">background_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
<span class="n">sprite</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">sprite_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
 
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
 
<span class="c1"># 让pygame完全控制鼠标</span>
<span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">set_grab</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
 
<span class="n">sprite_pos</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">150</span><span class="p">)</span>
<span class="n">sprite_speed</span> <span class="o">=</span> <span class="mf">300.</span>
<span class="n">sprite_rotation</span> <span class="o">=</span> <span class="mf">0.</span>
<span class="n">sprite_rotation_speed</span> <span class="o">=</span> <span class="mf">360.</span>
 
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
 
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
        <span class="c1"># 按Esc则退出游戏</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">KEYDOWN</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">K_ESCAPE</span><span class="p">:</span>
                <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
                <span class="nb">exit</span><span class="p">()</span>
 
    <span class="n">pressed_keys</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">get_pressed</span><span class="p">()</span>
    <span class="c1"># 这里获取鼠标的按键情况</span>
    <span class="n">pressed_mouse</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_pressed</span><span class="p">()</span>
 
    <span class="n">rotation_direction</span> <span class="o">=</span> <span class="mf">0.</span>
    <span class="n">movement_direction</span> <span class="o">=</span> <span class="mf">0.</span>
 
    <span class="c1"># 通过移动偏移量计算转动</span>
    <span class="n">rotation_direction</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_rel</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="mf">5.0</span>
 
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_LEFT</span><span class="p">]:</span>
        <span class="n">rotation_direction</span> <span class="o">=</span> <span class="o">+</span><span class="mf">1.</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_RIGHT</span><span class="p">]:</span>
        <span class="n">rotation_direction</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.</span>
    <span class="c1"># 多了一个鼠标左键按下的判断</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_UP</span><span class="p">]</span> <span class="ow">or</span> <span class="n">pressed_mouse</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="n">movement_direction</span> <span class="o">=</span> <span class="o">+</span><span class="mf">1.</span>
    <span class="c1"># 多了一个鼠标右键按下的判断</span>
    <span class="k">if</span> <span class="n">pressed_keys</span><span class="p">[</span><span class="n">K_DOWN</span><span class="p">]</span> <span class="ow">or</span> <span class="n">pressed_mouse</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
        <span class="n">movement_direction</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.</span>
 
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">background</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
 
    <span class="n">rotated_sprite</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">transform</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="n">sprite_rotation</span><span class="p">)</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">rotated_sprite</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span>
    <span class="n">sprite_draw_pos</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">sprite_pos</span><span class="o">.</span><span class="n">x</span><span class="o">-</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">sprite_pos</span><span class="o">.</span><span class="n">y</span><span class="o">-</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">rotated_sprite</span><span class="p">,</span> <span class="n">sprite_draw_pos</span><span class="p">)</span>
 
    <span class="n">time_passed</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
    <span class="n">time_passed_seconds</span> <span class="o">=</span> <span class="n">time_passed</span> <span class="o">/</span> <span class="mf">1000.0</span>
 
    <span class="n">sprite_rotation</span> <span class="o">+=</span> <span class="n">rotation_direction</span> <span class="o">*</span> <span class="n">sprite_rotation_speed</span> <span class="o">*</span> <span class="n">time_passed_seconds</span>
 
    <span class="n">heading_x</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">sprite_rotation</span><span class="o">*</span><span class="n">pi</span><span class="o">/</span><span class="mf">180.</span><span class="p">)</span>
    <span class="n">heading_y</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="n">sprite_rotation</span><span class="o">*</span><span class="n">pi</span><span class="o">/</span><span class="mf">180.</span><span class="p">)</span>
    <span class="n">heading</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="n">heading_x</span><span class="p">,</span> <span class="n">heading_y</span><span class="p">)</span>
    <span class="n">heading</span> <span class="o">*=</span> <span class="n">movement_direction</span>
 
    <span class="n">sprite_pos</span><span class="o">+=</span> <span class="n">heading</span> <span class="o">*</span> <span class="n">sprite_speed</span> <span class="o">*</span> <span class="n">time_passed_seconds</span>
 
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p>类似于键盘控制，用于鼠标控制可以调用<code>pygame.mouse</code>模块，其中具体的方法参考<a href="https://blog.csdn.net/Lingdongtianxia/article/details/86607245">mouse模块</a></p>
]]></content>
		</item>
		
		<item>
			<title>Pygame:motion</title>
			<link>https://boseliao.github.io/posts/pygamemotion/</link>
			<pubDate>Sat, 25 Jul 2020 17:24:29 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/pygamemotion/</guid>
			<description>首先，考虑一个简单的直线运动，
background_image_filename = &amp;#39;sushiplate.jpg&amp;#39; sprite_image_filename = &amp;#39;fugu.png&amp;#39; import pygame from pygame.locals import * from sys import exit pygame.init() screen = pygame.display.set_mode((640, 480), 0, 32) background = pygame.image.load(background_image_filename).convert() sprite = pygame.image.load(sprite_image_filename) # sprite的起始x坐标 x = 0. # Clock对象 clock = pygame.time.Clock() # 速度（像素/秒） speed = 250. while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() screen.blit(background, (0,0)) screen.blit(sprite, (x, 100)) time_passed = clock.tick() time_passed_seconds = time_passed / 1000.0 distance_moved = time_passed_seconds * speed x += distance_moved # 如果移动出屏幕了，就搬到开始位置继续 if x &amp;gt; 640.</description>
			<content type="html"><![CDATA[<p>首先，考虑一个简单的直线运动，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">background_image_filename</span> <span class="o">=</span> <span class="s1">&#39;sushiplate.jpg&#39;</span>
<span class="n">sprite_image_filename</span> <span class="o">=</span> <span class="s1">&#39;fugu.png&#39;</span>
 
<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
 
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
 
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
 
<span class="n">background</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">background_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
<span class="n">sprite</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">sprite_image_filename</span><span class="p">)</span>
 
<span class="c1"># sprite的起始x坐标</span>
<span class="n">x</span> <span class="o">=</span> <span class="mf">0.</span>

<span class="c1"># Clock对象</span>
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
 
<span class="c1"># 速度（像素/秒）</span>
<span class="n">speed</span> <span class="o">=</span> <span class="mf">250.</span>
 
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
 
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
 
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">background</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
    
    <span class="n">time_passed</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
    <span class="n">time_passed_seconds</span> <span class="o">=</span> <span class="n">time_passed</span> <span class="o">/</span> <span class="mf">1000.0</span>
    
    <span class="n">distance_moved</span> <span class="o">=</span> <span class="n">time_passed_seconds</span> <span class="o">*</span> <span class="n">speed</span>
    <span class="n">x</span> <span class="o">+=</span> <span class="n">distance_moved</span>
 
    <span class="c1"># 如果移动出屏幕了，就搬到开始位置继续</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mf">640.</span><span class="p">:</span>
        <span class="n">x</span><span class="o">-=</span> <span class="mf">640.</span>    
 
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p><code>clock.tick(30)</code>返回到上次调用时间间隔，参数限定每秒最大30帧，单位是毫秒</p>

<p>利用向量来控制运动会使得程序的编写更加方便，幸运的是官方的<code>gameobjects</code>模块提供了向量运算的计算模块，我们可以下载使用他。但是目前官方版本只适用于Python2，所以这里提供了适用于Python3的<a href="https://github.com/Boseliao/gameobjects_python3">gameobjects模块</a>。调用这个模块，我们可以利用向量运算控制运动</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="n">background_image_filename</span> <span class="o">=</span> <span class="s1">&#39;sushiplate.jpg&#39;</span>
<span class="n">sprite_image_filename</span> <span class="o">=</span> <span class="s1">&#39;fugu.png&#39;</span>
 
<span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
<span class="kn">from</span> <span class="nn">gameobjects.vector2</span> <span class="kn">import</span> <span class="n">Vector2</span>
 
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
 
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
 
<span class="n">background</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">background_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
<span class="n">sprite</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">sprite_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>
 
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
 
<span class="n">position</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mf">100.0</span><span class="p">,</span> <span class="mf">100.0</span><span class="p">)</span>
<span class="n">heading</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">)</span>
<span class="n">distance_move</span><span class="o">=</span><span class="mf">0.0</span>
<span class="n">distance</span><span class="o">=</span><span class="n">Vector2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">)</span>
<span class="n">destination</span><span class="o">=</span><span class="n">Vector2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">)</span>
<span class="n">speed</span> <span class="o">=</span> <span class="mf">2.5</span>
 
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
 
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">MOUSEBUTTONDOWN</span><span class="p">:</span>
            <span class="c1"># 参数前面加*意味着把列表或元组展开</span>
            <span class="n">destination</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span> <span class="o">*</span><span class="n">event</span><span class="o">.</span><span class="n">pos</span> <span class="p">)</span> <span class="o">-</span> <span class="n">Vector2</span><span class="p">(</span> <span class="o">*</span><span class="n">sprite</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span> <span class="p">)</span><span class="o">/</span><span class="mf">2.</span>
            <span class="n">heading</span> <span class="o">=</span> <span class="n">destination</span><span class="o">-</span><span class="n">position</span>
            <span class="n">heading</span><span class="o">.</span><span class="n">normalize</span><span class="p">()</span>
 
    <span class="n">distance</span><span class="o">=</span><span class="n">destination</span><span class="o">-</span><span class="n">position</span>
    <span class="k">if</span> <span class="n">distance</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mf">2.5</span><span class="o">/</span><span class="mf">1000.</span><span class="p">:</span>
        <span class="n">heading</span><span class="o">=</span><span class="n">Vector2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">)</span>
        
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">background</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    <span class="n">x</span><span class="o">=</span><span class="n">position</span><span class="o">.</span><span class="n">x</span>
    <span class="n">y</span><span class="o">=</span><span class="n">position</span><span class="o">.</span><span class="n">y</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">sprite</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
 
    <span class="n">time_passed</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
    <span class="n">time_passed_seconds</span> <span class="o">=</span> <span class="n">time_passed</span> <span class="o">/</span> <span class="mf">1000.0</span>

    <span class="n">distance_moved</span> <span class="o">=</span> <span class="n">time_passed_seconds</span><span class="o">*</span><span class="n">speed</span>   
 
    <span class="n">position</span> <span class="o">=</span> <span class="n">position</span> <span class="o">+</span> <span class="n">heading</span> <span class="o">*</span> <span class="n">distance_moved</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p>这个程序用鼠标控制运动的方向，为了避免错误，这里使sprite碰到边界的时候停下来。</p>
]]></content>
		</item>
		
		<item>
			<title>Pygame:visuals</title>
			<link>https://boseliao.github.io/posts/pygamevisuals/</link>
			<pubDate>Thu, 23 Jul 2020 16:56:10 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/pygamevisuals/</guid>
			<description>游戏中的视觉效果是由一系列色素构成的，每一个色素点用RGB（Red，Green，Blue）描述。我们可以生成一副包含所有颜色的图片，
import pygame pygame.init() screen = pygame.display.set_mode((640,480)) all_colors = pygame.Surface((4096,4096),depth=24) for r in range(256): print(r+1,&amp;#34;out of 256&amp;#34;) x = (r&amp;amp;15)*256 y = (r&amp;gt;&amp;gt;4)*256 for g in range(256): for b in range(256): all_colors.set_at((x+g,y+b),(r,g,b)) pygame.image.save(all_colors,&amp;#34;all_colrs.bmp&amp;#34;) pygame.Surface((width, height), flags=0, depth=0, masks=None)创建一个python的Surface图片实例，上文的convert()方法就是将加载的图片装换成Surface类。这里利用了方法set_at()设置像素值。
接下来我们利用如下程序来呈现如何改变三原色的配比来合成新的颜色，
import pygame from pygame.locals import * from sys import exit pygame.init() screen = pygame.display.set_mode((640,480),0,32) #create image with smooth gradients def create_scales(height): red_scale_surface = pygame.surface.Surface((640, height)) green_scale_surface = pygame.surface.Surface((640, height)) blue_scale_surface = pygame.</description>
			<content type="html"><![CDATA[<p>游戏中的视觉效果是由一系列色素构成的，每一个色素点用RGB（Red，Green，Blue）描述。我们可以生成一副包含所有颜色的图片，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pygame</span>
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span><span class="mi">480</span><span class="p">))</span>

<span class="n">all_colors</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">Surface</span><span class="p">((</span><span class="mi">4096</span><span class="p">,</span><span class="mi">4096</span><span class="p">),</span><span class="n">depth</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span>

<span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="s2">&#34;out of 256&#34;</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">r</span><span class="o">&amp;</span><span class="mi">15</span><span class="p">)</span><span class="o">*</span><span class="mi">256</span>
    <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">r</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="mi">256</span>
    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
            <span class="n">all_colors</span><span class="o">.</span><span class="n">set_at</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="n">g</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="n">b</span><span class="p">),(</span><span class="n">r</span><span class="p">,</span><span class="n">g</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>
            
<span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">all_colors</span><span class="p">,</span><span class="s2">&#34;all_colrs.bmp&#34;</span><span class="p">)</span></code></pre></div>
<p><code>pygame.Surface((width, height), flags=0, depth=0, masks=None)</code>创建一个python的Surface图片实例，上文的convert()方法就是将加载的图片装换成Surface类。这里利用了方法<code>set_at()</code>设置像素值。</p>

<p>接下来我们利用如下程序来呈现如何改变三原色的配比来合成新的颜色，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pygame</span>

<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>

<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span><span class="mi">480</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>

<span class="c1">#create image with smooth gradients</span>
<span class="k">def</span> <span class="nf">create_scales</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
    <span class="n">red_scale_surface</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">surface</span><span class="o">.</span><span class="n">Surface</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="n">height</span><span class="p">))</span>
    <span class="n">green_scale_surface</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">surface</span><span class="o">.</span><span class="n">Surface</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="n">height</span><span class="p">))</span>
    <span class="n">blue_scale_surface</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">surface</span><span class="o">.</span><span class="n">Surface</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="n">height</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">640</span><span class="p">):</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">x</span><span class="o">/</span><span class="mf">639.</span><span class="p">)</span><span class="o">*</span><span class="mf">255.</span><span class="p">)</span>
        <span class="n">red</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">green</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">blue</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
        <span class="n">line_rect</span> <span class="o">=</span> <span class="n">Rect</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">height</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="n">red_scale_surface</span><span class="p">,</span><span class="n">red</span><span class="p">,</span><span class="n">line_rect</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="n">green_scale_surface</span><span class="p">,</span><span class="n">green</span><span class="p">,</span><span class="n">line_rect</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="n">blue_scale_surface</span><span class="p">,</span><span class="n">blue</span><span class="p">,</span><span class="n">line_rect</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">red_scale_surface</span><span class="p">,</span><span class="n">green_scale_surface</span><span class="p">,</span><span class="n">blue_scale_surface</span>

<span class="n">red_scale</span><span class="p">,</span><span class="n">green_scale</span><span class="p">,</span><span class="n">blue_scale</span><span class="o">=</span><span class="n">create_scales</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span>

<span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="mi">127</span><span class="p">,</span><span class="mi">127</span><span class="p">,</span><span class="mi">127</span><span class="p">]</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
    
    <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    
    <span class="c1">#draw the scales to the screen</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">red_scale</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mo">00</span><span class="p">))</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">green_scale</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">80</span><span class="p">))</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">blue_scale</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">160</span><span class="p">))</span>
    
    <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_pos</span><span class="p">()</span>
    
    <span class="c1">#if the mouse was pressed on one of the sliders, adjust the color component</span>
    <span class="k">if</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_pressed</span><span class="p">()[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">component</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">y</span><span class="o">&gt;</span><span class="n">component</span><span class="o">*</span><span class="mi">80</span> <span class="ow">and</span> <span class="n">y</span><span class="o">&lt;</span><span class="p">(</span><span class="n">component</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">80</span><span class="p">:</span>
                <span class="n">color</span><span class="p">[</span><span class="n">component</span><span class="p">]</span><span class="o">=</span><span class="nb">int</span><span class="p">((</span><span class="n">x</span><span class="o">/</span><span class="mf">639.</span><span class="p">)</span><span class="o">*</span><span class="mf">255.</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s2">&#34;pygame color test -&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">color</span><span class="p">)))</span>
        
    <span class="c1">#draw a circle for each slider to represent the each current setting</span>
    <span class="k">for</span> <span class="n">component</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="n">pos</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">((</span><span class="n">color</span><span class="p">[</span><span class="n">component</span><span class="p">]</span><span class="o">/</span><span class="mf">255.</span><span class="p">)</span><span class="o">*</span><span class="mi">639</span><span class="p">),</span><span class="n">component</span><span class="o">*</span><span class="mi">80</span><span class="o">+</span><span class="mi">40</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">screen</span><span class="p">,(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="n">pos</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
        
    <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span><span class="nb">tuple</span><span class="p">(</span><span class="n">color</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">240</span><span class="p">,</span><span class="mi">640</span><span class="p">,</span><span class="mi">240</span><span class="p">))</span>
    
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p><code>pygame.surface.Surface</code>生成一个长为640，高为height的画布</p>

<p><code>Rect(x,y,width,height)</code>类，在位置x，y生成宽为width，高为height的矩形实例。这里取宽为1的小矩形离散化的表示颜色的渐变。</p>

<p><code>pygame.draw</code>用于在Surface上画一些简单的图形，比如点，线，直线，矩形，圆，弧形。一般第一个参数是Surface，第二个是颜色，第三个是一系列坐标，返回值是Rect对象。具体参考<a href="http://www.pygame.org/docs/ref/draw.html">官方文档</a></p>

<p><code>screen.fill</code>为背景填充颜色，除此之外<code>screen.set_clip(x,y,width,height)</code>裁剪一个区域，这样定义了可以被修改的区域。</p>

<p>颜色的渐变，利用线性插值的方法生成颜色渐变的过程，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>
 
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
 
<span class="n">color1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">221</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">color2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">96</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">51</span><span class="p">)</span>
<span class="n">factor</span> <span class="o">=</span> <span class="mf">0.</span>
 
<span class="k">def</span> <span class="nf">blend_color</span><span class="p">(</span><span class="n">color1</span><span class="p">,</span> <span class="n">color2</span><span class="p">,</span> <span class="n">blend_factor</span><span class="p">):</span>
    <span class="n">r1</span><span class="p">,</span> <span class="n">g1</span><span class="p">,</span> <span class="n">b1</span> <span class="o">=</span> <span class="n">color1</span>
    <span class="n">r2</span><span class="p">,</span> <span class="n">g2</span><span class="p">,</span> <span class="n">b2</span> <span class="o">=</span> <span class="n">color2</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">r1</span> <span class="o">+</span> <span class="p">(</span><span class="n">r2</span> <span class="o">-</span> <span class="n">r1</span><span class="p">)</span> <span class="o">*</span> <span class="n">blend_factor</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">g1</span> <span class="o">+</span> <span class="p">(</span><span class="n">g2</span> <span class="o">-</span> <span class="n">g1</span><span class="p">)</span> <span class="o">*</span> <span class="n">blend_factor</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">b1</span> <span class="o">+</span> <span class="p">(</span><span class="n">b2</span> <span class="o">-</span> <span class="n">b1</span><span class="p">)</span> <span class="o">*</span> <span class="n">blend_factor</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">g</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
 
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
 
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
 
    <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">((</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">))</span>
 
    <span class="n">tri</span> <span class="o">=</span> <span class="p">[</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">120</span><span class="p">),</span> <span class="p">(</span><span class="mi">639</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> <span class="p">(</span><span class="mi">639</span><span class="p">,</span> <span class="mi">140</span><span class="p">)</span> <span class="p">]</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">tri</span><span class="p">)</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">factor</span> <span class="o">*</span> <span class="mf">639.0</span><span class="p">),</span> <span class="mi">120</span><span class="p">),</span> <span class="mi">10</span><span class="p">)</span>
 
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_pos</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_pressed</span><span class="p">()[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="n">factor</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="mf">639.0</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s2">&#34;Pygame Color Blend Test - </span><span class="si">%.3f</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">factor</span><span class="p">)</span>
 
    <span class="n">color</span> <span class="o">=</span> <span class="n">blend_color</span><span class="p">(</span><span class="n">color1</span><span class="p">,</span> <span class="n">color2</span> <span class="p">,</span> <span class="n">factor</span><span class="p">)</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="mi">240</span><span class="p">))</span>
 
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p>最后简单的介绍一些将字体渲染成图片并画在屏幕的方法</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">font</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">font</span><span class="o">.</span><span class="n">SysFont</span><span class="p">(</span><span class="s2">&#34;arial&#34;</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
<span class="n">font_height</span> <span class="o">=</span> <span class="n">font</span><span class="o">.</span><span class="n">get_linesize</span><span class="p">()</span>
<span class="n">text_surface</span> <span class="o">=</span> <span class="n">font</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;Hello,World&#34;</span><span class="p">,</span><span class="bp">True</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">text_surface</span><span class="p">,(</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span></code></pre></div>
<p><code>font.SysFont</code>和<code>font.Font</code>分别是调用系统字体与自定义字体的方法，<code>font.render</code>是将文字渲染成Surface类图片，具体方法参考<a href="https://blog.csdn.net/Lingdongtianxia/article/details/86608691">font模块</a></p>
]]></content>
		</item>
		
		<item>
			<title>Pygame:framework</title>
			<link>https://boseliao.github.io/posts/pygameframework/</link>
			<pubDate>Thu, 23 Jul 2020 15:04:19 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/pygameframework/</guid>
			<description>利用Pygame学习一些简单的游戏开发，参考书目《Beginning Game Development with Python and Pygame》，原书的代码是基于python2，所以笔者对代码做了一些修改，测试环境如下，
 操作系统：windows 10 python版本：3.7.7 Pygame版本：1.9.6  Pygame编写游戏的基本框架，
import pygame background_image_filename=&amp;#39;sushiplate.jpg&amp;#39; mouse_image_filename=&amp;#39;fugu.png&amp;#39; from pygame.locals import * from sys import exit #It initializes each of the submodules in the pygame package, #pygame.sound.init() will initialize the sound module pygame.init() #create a display surface screen = pygame.display.set_mode((640,480),0,32) #set the title bar of thePygame window pygame.display.set_caption(&amp;#34;Hello,world!&amp;#34;) backgroound = pygame.image.load(background_image_filename).convert() mouse_cursor = pygame.image.load(mouse_image_filename).convert_alpha() while True: #the close button in the Pygame window for event in pygame.</description>
			<content type="html"><![CDATA[<p>利用Pygame学习一些简单的游戏开发，参考书目《Beginning Game Development with Python and Pygame》，原书的代码是基于python2，所以笔者对代码做了一些修改，测试环境如下，</p>

<ul>
<li>操作系统：windows 10</li>
<li>python版本：3.7.7</li>
<li>Pygame版本：1.9.6</li>
</ul>

<p>Pygame编写游戏的基本框架，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pygame</span>
<span class="n">background_image_filename</span><span class="o">=</span><span class="s1">&#39;sushiplate.jpg&#39;</span>
<span class="n">mouse_image_filename</span><span class="o">=</span><span class="s1">&#39;fugu.png&#39;</span>

<span class="kn">from</span> <span class="nn">pygame.locals</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="nb">exit</span>

<span class="c1">#It initializes each of the submodules in the pygame package,</span>
<span class="c1">#pygame.sound.init() will initialize the sound module</span>
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

<span class="c1">#create a display surface</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">640</span><span class="p">,</span><span class="mi">480</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
<span class="c1">#set the title bar of thePygame window</span>
<span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s2">&#34;Hello,world!&#34;</span><span class="p">)</span>

<span class="n">backgroound</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">background_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">()</span>
<span class="n">mouse_cursor</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">mouse_image_filename</span><span class="p">)</span><span class="o">.</span><span class="n">convert_alpha</span><span class="p">()</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    
    <span class="c1">#the close button in the Pygame window</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>
    
    <span class="c1">#blits the background image to the screen  </span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">backgroound</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    
    <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">get_pos</span><span class="p">()</span>
    <span class="n">x</span><span class="o">-=</span> <span class="n">mouse_cursor</span><span class="o">.</span><span class="n">get_width</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span>
    <span class="n">y</span><span class="o">-=</span> <span class="n">mouse_cursor</span><span class="o">.</span><span class="n">get_height</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">mouse_cursor</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
    
    <span class="c1">#the image we have created in memory is shown to the user without flicker</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">update</span><span class="p">()</span></code></pre></div>
<p><code>pygame.display.set_mode</code>创建一个窗口，接受三个参数，第一个元组表示窗口的长和高，第二个是flags参数，0表示缺省值，可选“FULLSCREEN(全屏),RESIZABLE(自定义),NOFRAME(无框架)”，第三个参数表示储存颜色的比特数可选“8,15,16,24,32”。</p>

<p><code>pygame.image.load</code>加载图片，convert方法将图片格式转换成展示在窗口的样式，convert.alpha图片接受位置信息。</p>

<p><code>pygame.event.get</code>检测并响应用户输入，在大型游戏的开发中这部分需要重构并单独定义函数来控制。这接受用户退出的命令，退出循环。</p>

<p><code>screen.blit</code>在窗口画出图片，第二个是位置信息（在pygame图片总是以矩形存在的，所以可以用图片的左上角表示位置，坐标轴的原点在窗口左上角）</p>

<p><code>pygame.display.update</code>刷新窗口，刷新的频率表示游戏的帧率。</p>

<p>原中关于鼠标，键盘控制由于涉及其他的知识点我们将在以后的博文提到</p>
]]></content>
		</item>
		
		<item>
			<title>QC:search_algorithm</title>
			<link>https://boseliao.github.io/posts/qcsearch_algorithm/</link>
			<pubDate>Sat, 27 Jun 2020 19:38:17 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/qcsearch_algorithm/</guid>
			<description>使用量子搜索算法(Grover&amp;rsquo;s algorithm)能够大大降低计算的复杂度，这里我们可以利用几何图形分析该算法。
定义一个算符 $$ O\sum_x\alpha_x|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)=\sum_x(-1)^{f(x)}\alpha_x|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right) $$ 其中，a是我门要搜索的目标态，|x&amp;gt;表示数据库， $$ x=a,f(x)=1;\quad x\neq a ,f(x)=0.\quad a\in {1,\cdots,N} $$ 从初态psi每次转动theta角度(相对于做两次投影对称)，需要pi/(2*theta)次转动，
首先，考虑态相对于alpha的投影对称，这里a=beta $$ O\sum_x\alpha_x|x\rangle=\sum_x(-1)^{f(x)}\alpha_x|x\rangle=\sum_{x\neq a}\left(\alpha_x|x\rangle-\alpha_a|a\rangle\right)=\sum_{x}\left(\alpha_x|x\rangle-2\alpha_a|a\rangle\right) $$ 相当于翻转beta方向的态失 $$ O=I-2|a\rangle\langle a|=R_{\alpha} $$ 然后相对于psi投影翻转 $$ R_{\psi}=-I+2|\psi\rangle\langle\psi|=H^{\otimes n}\left(-I+2|0\rangle\langle 0| \right)H^{\otimes n} $$ 即 $$ \left[\left(|\psi\rangle\langle\psi|-I \right)O \right]^R\frac{1}{\sqrt{N}}\sum_{x=1}^N|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)\approx |a\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right) $$ 其中 $$ R=\frac{\pi\sqrt{N}}{4} $$ 测量第一个寄存器可以得到a。这里搜索1至2^n的数据库，
其中的Grover算符，</description>
			<content type="html"><![CDATA[<p>使用量子搜索算法(Grover&rsquo;s algorithm)能够大大降低计算的复杂度，这里我们可以利用几何图形分析该算法。</p>

<p>定义一个算符
$$
O\sum_x\alpha_x|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)=\sum_x(-1)^{f(x)}\alpha_x|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)
$$
其中，a是我门要搜索的目标态，|x&gt;表示数据库，
$$
x=a,f(x)=1;\quad x\neq a ,f(x)=0.\quad a\in {1,\cdots,N}
$$
从初态psi每次转动theta角度(相对于做两次投影对称)，需要pi/(2*theta)次转动，</p>

<p><img src="/img/search.png" alt="img1" /></p>

<p>首先，考虑态相对于alpha的投影对称，这里a=beta
$$
O\sum_x\alpha_x|x\rangle=\sum_x(-1)^{f(x)}\alpha_x|x\rangle=\sum_{x\neq a}\left(\alpha_x|x\rangle-\alpha_a|a\rangle\right)=\sum_{x}\left(\alpha_x|x\rangle-2\alpha_a|a\rangle\right)
$$
相当于翻转beta方向的态失
$$
O=I-2|a\rangle\langle a|=R_{\alpha}
$$
然后相对于psi投影翻转
$$
R_{\psi}=-I+2|\psi\rangle\langle\psi|=H^{\otimes n}\left(-I+2|0\rangle\langle 0| \right)H^{\otimes n}
$$
即
$$
\left[\left(|\psi\rangle\langle\psi|-I \right)O \right]^R\frac{1}{\sqrt{N}}\sum_{x=1}^N|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)\approx |a\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)
$$
其中
$$
R=\frac{\pi\sqrt{N}}{4}
$$
测量第一个寄存器可以得到a。这里搜索1至2^n的数据库，</p>

<p><img src="/img/QC:ordfound_img2.png" alt="img2" /></p>

<p>其中的Grover算符，</p>

<p><img src="/img/QC:ordfound_img3.png" alt="img3" /></p>
]]></content>
		</item>
		
		<item>
			<title>QC:shor_orderfounding</title>
			<link>https://boseliao.github.io/posts/qcshor_orderfounding/</link>
			<pubDate>Wed, 17 Jun 2020 12:50:24 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/qcshor_orderfounding/</guid>
			<description>算法原理：
设一大数N，可以分解成N=n1*n2，shor算法概述：
 随机取一正整数y，要求y&amp;lt;N，且与N互质，利用order-founding算法求r=ord(y,N)，r是使得 $$ y^r(mod)N=1 $$ 的最小整数。等价的可以得到 $$ \begin{array}{1c} y^r=kN+1\newline y^{r+1}=kNy+y\newline y^{r+1}(mod)N=y(mod)N\newline y^{r+x}(mod)N=y^x(mod)N \end{array} $$ 即函数f(t)的周期为r $$ f(t)=y^t(mod)N $$
 若得到的周期r为奇数或者r是偶数但 $$ y^{r/2}(mod)N=-1 $$ 则重新取y值，并重复第一个步骤。
 r是偶数，且 $$ y^{r/2}(mod)N\neq-1 $$ 取 $$ x(mod)N=y^{r/2},\quad x^2(mod)N=1,\quad (x+1)(x-1)=tN=t*n1*n2 $$ 分别对他们取最大公约数，可以得到n1，n2 $$ n1=gcd(x+1,N),\quad n2=gcd(x-1,N) $$
 Euclid&amp;rsquo;s algorithm计算gcd(x,N),N&amp;gt;x，
  $$ r=N(mod)x,\quad r=0,z=x $$
$$ r\neq 0,\quad z=gcd(N,x)=gcd(x,r)=gcd(r,r_1)=\cdots=gcd(r_m,0)=r_m $$
order founding 利用量子傅里叶算法以及量子相位估计算法实现r=ord(y,N)。
需要两组寄存器
 寄存器1，包含K个量子比特，存储数字Q $$ Q=2^K,\quad N^2&amp;lt;Q&amp;lt;2N^2 $$
 寄存器2，包含n个量子比特，存储数字N $$ N=2^n $$</description>
			<content type="html"><![CDATA[

<p>算法原理：</p>

<p>设一大数N，可以分解成N=n1*n2，shor算法概述：</p>

<ol>
<li><p>随机取一正整数y，要求y&lt;N，且与N互质，利用order-founding算法求r=ord(y,N)，r是使得
$$
y^r(mod)N=1
$$
的最小整数。等价的可以得到
$$
\begin{array}{1c}
y^r=kN+1\newline
y^{r+1}=kNy+y\newline
y^{r+1}(mod)N=y(mod)N\newline
y^{r+x}(mod)N=y^x(mod)N
\end{array}
$$
即函数f(t)的周期为r
$$
f(t)=y^t(mod)N
$$</p></li>

<li><p>若得到的周期r为奇数或者r是偶数但
$$
y^{r/2}(mod)N=-1
$$
则重新取y值，并重复第一个步骤。</p></li>

<li><p>r是偶数，且
$$
y^{r/2}(mod)N\neq-1
$$
取
$$
x(mod)N=y^{r/2},\quad x^2(mod)N=1,\quad (x+1)(x-1)=tN=t*n1*n2
$$
分别对他们取最大公约数，可以得到n1，n2
$$
n1=gcd(x+1,N),\quad n2=gcd(x-1,N)
$$</p></li>

<li><p>Euclid&rsquo;s algorithm计算gcd(x,N),N&gt;x，</p></li>
</ol>

<p>$$
r=N(mod)x,\quad r=0,z=x
$$</p>

<p>$$
r\neq 0,\quad z=gcd(N,x)=gcd(x,r)=gcd(r,r_1)=\cdots=gcd(r_m,0)=r_m
$$</p>

<h2 id="order-founding">order founding</h2>

<p>利用量子傅里叶算法以及量子相位估计算法实现r=ord(y,N)。</p>

<p>需要两组寄存器</p>

<ul>
<li><p>寄存器1，包含K个量子比特，存储数字Q
$$
Q=2^K,\quad N^2&lt;Q&lt;2N^2
$$</p></li>

<li><p>寄存器2，包含n个量子比特，存储数字N
$$
N=2^n
$$</p></li>
</ul>

<p><img src="/img/QC_ordfound.png" alt="img1" /></p>

<p>所有寄存器1的初态设为|0&gt;，寄存器2的初态设为|1&gt;，将寄存器1经过<code>Hadmard</code>门
$$
(H^{\otimes K}|0\rangle)|1\rangle=\frac{1}{\sqrt{Q}}\sum_{q=0}^{Q-1}|q\rangle|1\rangle
$$
在经过一个控制电路，
$$
U_y(q)\frac{1}{\sqrt{Q}}\sum_{q=0}^{Q-1}|q\rangle|1\rangle=\frac{1}{\sqrt{Q}}\sum_{q=0}^{Q-1}|q\rangle|y^q(mod)N\rangle
$$</p>

<p>利用Modular exponentiation算法制备以上态，设
$$
U|x\rangle=|xy(mod)N\rangle,\quad U^2|x\rangle=|xy^2(mod)N\rangle
$$
所以
$$
U_y(q)|q\rangle|1\rangle=|q\rangle|y^q(mod)N\rangle=|q\rangle|y^{q_{K-1}2^{K-1}\cdots q_02^0}(mod)N\rangle=|q\rangle U^{q_{K-1}2^{K-1}}\cdots U^{q_02^0}|1\rangle
$$
其中
$$
U^{2^j}=U^{2^{j-1}}U^{2^{j-1}}
$$
测量寄存器2中的量子比特，假设得到f(q0)，Q=mr，则量子态变成
$$
\frac{1}{\sqrt{m}}\sum_{j=0}^{m-1}|jr+q_0\rangle |f(q_0)\rangle
$$
目前寄存器1的量子比特处于叠加态，直接测量还无法方便的得到周期，这里对其做傅里叶变化，
$$
\frac{1}{\sqrt{m}}\sum_{j=0}^{m-1}|jr+q_0\rangle\to\frac{1}{\sqrt{mQ}}\sum_{k=0}^{Q-1}\sum_{j=0}^{m-1}e^{2\pi i\frac{(jr+q_0)k}{Q}}|k\rangle=\frac{1}{\sqrt{mQ}}\sum_{k=0}^{Q-1}\left(\sum_{j=0}^{m-1}e^{2\pi i\frac{jk}{m}}\right)e^{2\pi i\frac{q_0k}{Q}}|k\rangle
$$
对于内部的求和
$$
\sum_{j=0}^{m-1}e^{2\pi i\frac{jk}{m}}=m\delta_{k,mk\prime}
$$
寄存器1中的量子态
$$
\frac{m}{\sqrt{mQ}}\sum_{k=0}^{Q-1}e^{2\pi i\frac{q_0k}{Q}}|k\rangle=\frac{1}{\sqrt{r}}\sum_{k\prime=0}^{r-1}e^{2\pi i\frac{q_0k\prime}{r}}|mk\prime\rangle
$$
测量得到
$$
C=mk\prime=\frac{Q}{r}k\prime,\quad \frac{C}{Q}=\frac{k\prime}{r}
$$
当gcd(k\prime,r)=1时，可以唯一确定周期r，测量得到gcd(k\prime,r)=1的概率大于1/log[r]。最后，令
$$
x=y^{r/2}\pm 1
$$
并计算，
$$
z=gcd(N,x)
$$</p>
]]></content>
		</item>
		
		<item>
			<title>QC:quantum_phase_estimation</title>
			<link>https://boseliao.github.io/posts/qcquantum_phase_estimation/</link>
			<pubDate>Sat, 13 Jun 2020 18:16:09 +0800</pubDate>
			
			<guid>https://boseliao.github.io/posts/qcquantum_phase_estimation/</guid>
			<description>quantum phase estimation(QPE) 量子相位估计算法应用了量子傅里叶逆变换，同时作为一个实用的基础量子算法，又被应用在Shor&amp;rsquo;s Algorithm（质因式分解算法），和HHL algorithm（经常用于各种量子机器学习的最优化算法）等等算法中。
假设有一个幺正算符U，具有本征态|u&amp;gt;，以及对应的本征值为e^(i\phi),(0&amp;lt;\phi的量子比特，你的选取将会影响得到\phi的精度以及得到正确本征值的概率。二，第二组寄存器需要足够量子比特存储态|u&amp;gt;。
由图可知，第一组寄存器的量子比特经过一个Hadmard门和C-U^{2^j}门 $$ |0\rangle\cdots|0\rangle|u\rangle\to Hadamard\to\frac{1}{\sqrt{2^n}}\left(|0\rangle+|1\rangle \right)\cdots\left(|0\rangle+|1\rangle \right)|u\rangle $$
$$ \to C-U^{2^j}\to\frac{1}{\sqrt{2^n}}\left(|0\rangle+e^{i2^{n-1}\phi}|1\rangle \right)\cdots\left(|0\rangle+e^{i\phi}|1\rangle \right)|u\rangle=\frac{1}{\sqrt{2^n}}\sum_{y=0}^{2^n-1}e^{i\phi y}|y\rangle |u\rangle $$
这里输出第一组寄存器中的\phi依赖于测量态的概率，但我们测量到的是态而非概率幅度，利用傅里叶变换可以将概率幅度存储的相位存储到量子态中。量子傅里叶逆变换为 $$ QFT^{-1}|y\rangle=\frac{1}{\sqrt{2^n}}\sum_{x=0}^{2^{n}-1}\exp(-2\pi i\frac{xy}{2^n})|x\rangle $$ 将\phi写成 $$ \phi=2\pi\left(\frac{a}{2^n}+\delta \right),\quad a=a_{n-1}\cdots a_0,0&amp;lt;\delta|u&amp;gt;，可以得到本征值 $$ \phi=\frac{2\pi a}{2^n} $$ 当\delta不等于0时，则测到态|a&amp;gt;|u&amp;gt;的概率幅 $$ C_a=\frac{1}{2^n}\sum_{y=0}^{2^n-1}e^{2\pi i\delta y}&amp;gt;\frac{2}{\pi} $$
import numpy as np import matplotlib.pyplot as plt import qutip as qt from qutip.qip.circuit import QubitCircuit, Gate from qutip.qip import gates def user_gate1(): &amp;#34;&amp;#34;&amp;#34; define C-U:control-qubit=0,u=1;conrol-qubit=1,u=[[1.,0.],[0.,-1.]] &amp;#34;&amp;#34;&amp;#34; mat_control0=qt.</description>
			<content type="html"><![CDATA[<p>quantum phase estimation(QPE) 量子相位估计算法应用了量子傅里叶逆变换，同时作为一个实用的基础量子算法，又被应用在Shor&rsquo;s Algorithm（质因式分解算法），和HHL algorithm（经常用于各种量子机器学习的最优化算法）等等算法中。</p>

<p>假设有一个幺正算符U，具有本征态|u&gt;，以及对应的本征值为e^(i\phi),(0&lt;\phi<2\pi)。
$$
U|u\rangle=e^{i\phi}|u\rangle,\quad U^{2j}|u\rangle=e^{i\phi 2^j}|u\rangle
$$
我们可以利用QPE算法寻找该算符本征值。QPE算符需要两组寄存器，一，第一组寄存器包含n个初态为|0>的量子比特，你的选取将会影响得到\phi的精度以及得到正确本征值的概率。二，第二组寄存器需要足够量子比特存储态|u&gt;。</p>

<p><img src="/img/QC_QPE_img1.png" alt="img1" /></p>

<p>由图可知，第一组寄存器的量子比特经过一个<code>Hadmard</code>门和<code>C-U^{2^j}</code>门
$$
|0\rangle\cdots|0\rangle|u\rangle\to Hadamard\to\frac{1}{\sqrt{2^n}}\left(|0\rangle+|1\rangle \right)\cdots\left(|0\rangle+|1\rangle \right)|u\rangle
$$</p>

<p>$$
\to C-U^{2^j}\to\frac{1}{\sqrt{2^n}}\left(|0\rangle+e^{i2^{n-1}\phi}|1\rangle \right)\cdots\left(|0\rangle+e^{i\phi}|1\rangle \right)|u\rangle=\frac{1}{\sqrt{2^n}}\sum_{y=0}^{2^n-1}e^{i\phi y}|y\rangle |u\rangle
$$</p>

<p>这里输出第一组寄存器中的\phi依赖于测量态的概率，但我们测量到的是态而非概率幅度，利用傅里叶变换可以将概率幅度存储的相位存储到量子态中。量子傅里叶逆变换为
$$
QFT^{-1}|y\rangle=\frac{1}{\sqrt{2^n}}\sum_{x=0}^{2^{n}-1}\exp(-2\pi i\frac{xy}{2^n})|x\rangle
$$
将\phi写成
$$
\phi=2\pi\left(\frac{a}{2^n}+\delta \right),\quad a=a_{n-1}\cdots a_0,0&lt;\delta<1/2^{n+1}
$$
将量子傅里叶逆变换作用到第一组寄存器的量子比特中
$$
\frac{1}{\sqrt{2^n}}\sum_{y=0}^{2^n-1}e^{i\phi y}|y\rangle |u\rangle\to\frac{1}{2^n}\sum_{x=0}^{2^n-1}\sum_{y=0}^{2^n-1}e^{2\pi i(a-x) y/2^n}e^{2\pi i\delta y}|x\rangle |u\rangle
$$
考虑里面的求和
$$
\sum_{y=0}^{2^n-1}e^{2\pi i(a-x) y/2^n}e^{2\pi i\delta y}
$$
当\delta=0时，
$$
a-x\neq 0,\frac{a-x}{2^n}<1,\sum_{y=0}^{n-1}e^{2\pi i(a-x) y/2^n}=\frac{1-q^{2^n}}{1-q}=0,q=e^{2\pi i(a-x) /2^n}
$$
所以只能取`a=x`的情况，输出态为|a>|u&gt;，可以得到本征值
$$
\phi=\frac{2\pi a}{2^n}
$$
当\delta不等于0时，则测到态|a&gt;|u&gt;的概率幅
$$
C_a=\frac{1}{2^n}\sum_{y=0}^{2^n-1}e^{2\pi i\delta y}&gt;\frac{2}{\pi}
$$</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">qutip</span> <span class="kn">as</span> <span class="nn">qt</span>
<span class="kn">from</span> <span class="nn">qutip.qip.circuit</span> <span class="kn">import</span> <span class="n">QubitCircuit</span><span class="p">,</span> <span class="n">Gate</span>
<span class="kn">from</span> <span class="nn">qutip.qip</span> <span class="kn">import</span> <span class="n">gates</span>
<span class="k">def</span> <span class="nf">user_gate1</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    define C-U:control-qubit=0,u=1;conrol-qubit=1,u=[[1.,0.],[0.,-1.]]
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">mat_control0</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]),</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">mat_control1</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">0.</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]),</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">mat_target0</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.</span><span class="p">,</span><span class="mf">0.</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span><span class="mf">1.</span><span class="p">]]),</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">mat_target1</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]]),</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">mat</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">mat_control0</span><span class="p">,</span><span class="n">mat_target0</span><span class="p">)</span><span class="o">+</span><span class="n">qt</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">mat_control1</span><span class="p">,</span><span class="n">mat_target1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">mat</span>
<span class="k">def</span> <span class="nf">user_gate2</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    define C-U2:control-qubit=0,u=1;conrol-qubit=1,u=[[1.,0.],[0.,-1.]]
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">mat_control0</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]),</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">mat_control1</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">0.</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]),</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">mat_target0</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.</span><span class="p">,</span><span class="mf">0.</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span><span class="mf">1.</span><span class="p">]]),</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.</span><span class="p">,</span><span class="mf">0.</span><span class="p">],[</span><span class="mf">0.</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]])</span>
    <span class="n">mat_target1</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">Qobj</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">a</span><span class="p">,</span><span class="n">dims</span><span class="o">=</span><span class="p">[[</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">]])</span>
    <span class="n">mat</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">mat_control0</span><span class="p">,</span><span class="n">mat_target0</span><span class="p">)</span><span class="o">+</span><span class="n">qt</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">mat_control1</span><span class="p">,</span><span class="n">mat_target1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">mat</span>
<span class="n">qc</span><span class="o">=</span><span class="n">QubitCircuit</span><span class="p">(</span><span class="n">N</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">qc</span><span class="o">.</span><span class="n">user_gates</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;C_U&#34;</span><span class="p">:</span><span class="n">user_gate1</span><span class="p">,</span><span class="s2">&#34;C_U2&#34;</span><span class="p">:</span><span class="n">user_gate2</span><span class="p">}</span>
<span class="n">qc</span><span class="o">.</span><span class="n">add_gate</span><span class="p">(</span><span class="s2">&#34;SNOT&#34;</span><span class="p">,</span><span class="n">targets</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">qc</span><span class="o">.</span><span class="n">add_gate</span><span class="p">(</span><span class="s2">&#34;SNOT&#34;</span><span class="p">,</span><span class="n">targets</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">qc</span><span class="o">.</span><span class="n">add_gate</span><span class="p">(</span><span class="s2">&#34;C_U&#34;</span><span class="p">,</span><span class="n">targets</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">qc</span><span class="o">.</span><span class="n">add_gate</span><span class="p">(</span><span class="s2">&#34;C_U2&#34;</span><span class="p">,</span><span class="n">targets</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">Fourier-transform,back
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="n">qc</span><span class="o">.</span><span class="n">add_gate</span><span class="p">(</span><span class="s2">&#34;SNOT&#34;</span><span class="p">,</span><span class="n">targets</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">qc</span><span class="o">.</span><span class="n">add_gate</span><span class="p">(</span><span class="s2">&#34;CPHASE&#34;</span><span class="p">,</span><span class="n">controls</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">targets</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">arg_value</span><span class="o">=-</span><span class="mf">0.5</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
<span class="n">qc</span><span class="o">.</span><span class="n">add_gate</span><span class="p">(</span><span class="s2">&#34;SNOT&#34;</span><span class="p">,</span><span class="n">targets</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">U_list</span> <span class="o">=</span> <span class="n">qc</span><span class="o">.</span><span class="n">propagators</span><span class="p">()</span>
<span class="kn">from</span> <span class="nn">qutip.qip.operations</span> <span class="kn">import</span> <span class="n">gate_sequence_product</span>
<span class="n">U</span> <span class="o">=</span> <span class="n">gate_sequence_product</span><span class="p">(</span><span class="n">U_list</span><span class="p">)</span>
<span class="n">zero</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">basis</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="n">input_0</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">zero</span><span class="p">,</span><span class="n">zero</span><span class="p">)</span>
<span class="n">u0</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">basis</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">psi0</span><span class="o">=</span><span class="n">qt</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">input_0</span><span class="p">,</span><span class="n">u0</span><span class="p">)</span>
<span class="n">psit</span><span class="o">=</span><span class="n">U</span><span class="o">*</span><span class="n">psi0</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">output
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="n">a_0</span><span class="o">=</span><span class="n">psit</span><span class="o">.</span><span class="n">ptrace</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">a_1</span><span class="o">=</span><span class="n">psit</span><span class="o">.</span><span class="n">ptrace</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a_1</span><span class="p">,</span><span class="n">a_0</span><span class="p">,</span><span class="n">psit</span><span class="p">)</span></code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
