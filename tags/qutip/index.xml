<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qutip on BoseLiao&#39;s Blog</title>
    <link>https://boseliao.github.io/tags/qutip/</link>
    <description>Recent content in Qutip on BoseLiao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 18 May 2020 15:10:50 +0800</lastBuildDate>
    
	<atom:link href="https://boseliao.github.io/tags/qutip/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>QuTip:含时系统</title>
      <link>https://boseliao.github.io/posts/qutip%E5%90%AB%E6%97%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 18 May 2020 15:10:50 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qutip%E5%90%AB%E6%97%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>前面已经简单的介绍过关于含时Lindblad主方程的求解，以及含时的哈密顿量和跃迁算符的表示。相应的，Bloch-Redfield含时的主方程也可以做类似求解，
kappe=0.5 def co1_coeff(t,args): return np.sqrt(kappe*np.exp(-t)) N=10 a=qt.destroy(N) H0=a.dag()*a H1=a+a.dag() def H1_coeff(t,args): return 9*np.exp(-(t/5.0)**2) H=[H0,[H1,H1_coeff]] psi0=qt.basis(N,9) c_ops=[a,[a,co1_coeff]] times=np.linspace(0.0,10.0,100) output=qt.mesolve(H,psi0,times,c_ops,[a.dag()*a]) #time-dependt Lindblad equation a_ops=[[(a,a.dag()),(&amp;#39;{0}*(w&amp;gt;0)&amp;#39;.format(kappe),&amp;#39;exp(1j*t)&amp;#39;,&amp;#39;exp(-1j*t)&amp;#39;)]] out2=qt.brmesolve(H0,psi0,times,a_ops,e_ops=[a.dag()*a]) #time-dependt Redfield equation 除此之外，当含时的参数是非解析的函数或者由实验得到的数据点时，需要将数据点变成函数。
t=np.linspace(-15,15,100) func=lambda t: 9*np.exp(-(t/5)**2) #anonymous functions noisy_func=lambda t: func(t)+(0.05*func(t))*np.random.randn(t.shape[0]) #generary a random array shape like t,Standard normal distribution noisy_data=noisy_func(t) S=qt.interpolate.Cubic_Spline(t[0],t[-1],noisy_data) H=[[H1,S]] 含时算符的指数级数表示$\hat{A}=\sum_i\hat{a}e^{r_it}$，
&amp;#34;&amp;#34;&amp;#34; Exponential-series representation &amp;#34;&amp;#34;&amp;#34; es1=qt.eseries(qt.sigmax(),1j) #sigma_x*exp(jt) es2=qt.eseries([qt.sigmax(),qt.sigmax()],[1j,-1j])#sigms_x*exp(jt)+sigma_xexp(-jt) &amp;#34;&amp;#34;&amp;#34; evaluate it at time t=2 &amp;#34;&amp;#34;&amp;#34; qt.esval(es2,2.0) Floquet理论 在Lindblad和Bloch-Redfield主方程的标准推导中，所考虑的系统是不显含时时间的。因此，严格地说，这些主方程形式不应盲目地应用于含时哈密顿量的系统。然而，在许多特定的情况下，特别是对于弱驱动的情况，标准主方程仍然适用于许多含时的问题。但更严格的方法是从含时的哈密顿量开始重新推导主方程。Floquet-Markov主方程是这样一种形式的主方程，它在强驱动系统中有着重要的应用。
封闭系统的Floquet计算方法$\psi(t)=\sum{\alpha}c{\alpha}\psi{\alpha}(t)=\sum{\alpha}c{\alpha}e^{-i\epsilon{\alpha}t}\phi{\alpha}(t)$，其中$\psi{\alpha}$表示“Floquet state”，$\phi{\alpha}$表示周期的“Floquet mode”，$\phi{\alpha}(t+T)=\phi{\alpha}(t)$，$\epsilon{\alpha}$表示常数“quasienergy”</description>
    </item>
    
    <item>
      <title>QuTip的基本运算</title>
      <link>https://boseliao.github.io/posts/qutip%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</link>
      <pubDate>Fri, 15 May 2020 13:21:41 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qutip%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</guid>
      <description>QuTip (Quantum Toolbox in Python) 是在开源的Python程序语音的框架下，用来模拟量子系统的动力学。其中，定义了一般的量子力学对象，运算算符，以及量子力学方程的求解方法。使用下列代码时，请调用QuTip模块，并使用如下语句
import numpy as np import matplotlib.pyplot as plt import qutip as qt 首先，QuTip 定义了量子对象类(The quantum object class)，可以通过输入命令Qobj(),创建一个空的量子对象。Qobj()类中拥有5个属性，
 Type：ket，bra，operator，superoperator，operator-ket，operator-bra Data：数组 Hermitian：false，ture Dimensions：算符的维度 Shape：数组的形状  具体对象，态的定义 量子态的定义可以通过phi=Qobj([[1],[2],[3]])来得到ket或者bra的态失，也可以通过rho=ket2dm(phi)得到密度矩阵。这里也定义了一些特殊态，Fock state，basis(N,m)或者fock(N,m);相干态，coherence(N,alpha)。具体函数的输入以及参数的使用，可以利用help(basis)查看。
算符的定义 量子算符按照是否可观测可分为Hermitian算符与non-Hermitian算符，可以定义
r=np.array([[1,2],[3,4]]) Qobj(r) 其中也定义了一些常用的算符：
   operator command     Commutator commutator(A,B,kind)   sigma-X sigmax()   Lowing operator destroy(N)    等等。。。
超算符 在Liouville空间中，算符在处理时被视为向量，可以通过
vec_rho=operator_to_vector(rho) rho=vector_to_operator(vec_rho) 超算符
X=sigmax() S=spre(X) #I tensor X S1=spost(X) # X tensor I S2=spre(X)*spost(X.</description>
    </item>
    
    <item>
      <title>QuTip的安装与配置</title>
      <link>https://boseliao.github.io/posts/qutip%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 13 May 2020 10:17:14 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qutip%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>Qutip(Quantum Toolbox in Python)是用于研究量子系统的有力工具，这是python下的一个模块，我们需要下载，安装他。
 推荐使用conda进行python环境的管理，对于python环境的基本配置可在参考书目1，以及对于Python语句的学习使用参考书目2。QuTip的安装参考指导手册。需要注意的是，在安装完miniconda或者Anaconda之后，需要更新conda使用命令。
conda update conda  conda的配置   首先使用conda list查看安装的包以及python版本，特别的，模块QuTip的安装依赖以下的包numpy，scipy，cython，pytest并且python的版本必须在3.0以上，需要确认以上包已经被安装在conda环境中。如果没有上述包，则使用如下语句进行包的安装。类似的，Python的IDE也可以用如下命令选择安装skyder。
conda install package_name 添加conda的频道并更新
conda config --append channels conda-forge conda config --add channels conda-forge conda update  创建配置python3环境   如果发现Python不是3.0以上版本，可以利用conda创建新的python3环境，并在python3环境中重新配置QuTip。首先使用命令
conda env list 查看环境列表，在前面带有*表示当前环境，一般处于base环境中。接下来我们创建python3环境，
conda create -n python3 python=3 这里我们创建了名称为python3，并且安装了python3最新版本的环境。使用命令
source activate python3 可以激活环境python3。首先，在该环境下查看是否安装了python3以上的版本使用python --version，如果没有使用命令
conda install python 就可以安装Python3版本。并在环境python3中，重复二步骤检查QuTip的依赖包。
依旧在python3环境中，使用conda install qutip安装qutip，如果无法搜索到则可以到QuTip官网下载安装包，在python3环境中使用pip安装
pip install QuTip.* 最后QuTip的测试代码，如果能显示无误，那么就安装成功了。
import qutip.testing as qt qt.run()  Python物理学高效计算 [return] Python物理建模初学者指南 [return]   </description>
    </item>
    
  </channel>
</rss>