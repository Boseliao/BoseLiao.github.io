<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BoseLiao&#39;s Blog</title>
    <link>https://boseliao.github.io/</link>
    <description>Recent content on BoseLiao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 27 Jul 2020 10:10:38 +0800</lastBuildDate>
    
	<atom:link href="https://boseliao.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pygame:Artificial_Intelligence</title>
      <link>https://boseliao.github.io/posts/pygameartificial_intelligence/</link>
      <pubDate>Mon, 27 Jul 2020 10:10:38 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/pygameartificial_intelligence/</guid>
      <description>游戏中的人工智能是一种错觉（现实生活中也可能如此）。创建这种错觉的代码与前几章中的代码没有太大区别。我们将使用Python字符串、列表、字典等基本工具来构建类，这些类实际上是NPC(nonplayer characters)的大脑。实际上，Python可能是编写AI的最佳语言之一，因为它有大量的内置对象。
首先我们构造一个游戏世界
#建立世界类 class World(object): def __init__(self): self.entities = {} self.entity_id = 0 self.background = pygame.surface.Surface(SCREEN_SIZE).convert() self.background.fill((255, 255, 255)) pygame.draw.circle(self.background, (200, 255, 200), NEST_POSITION, int(NEST_SIZE)) #add and remove entity  def add_entity(self, entity): self.entities[self.entity_id] = entity entity.id = self.entity_id self.entity_id += 1 def remove_entity(self, entity): del self.entities[entity.id] #通过id得到实体 def get(self, entity_id): if entity_id in self.entities: return self.entities[entity_id] else: return None #entity process def process(self, time_passed): time_passed_seconds = time_passed / 1000.</description>
    </item>
    
    <item>
      <title>Pygame:user_control</title>
      <link>https://boseliao.github.io/posts/pygameuser_control/</link>
      <pubDate>Sun, 26 Jul 2020 12:15:43 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/pygameuser_control/</guid>
      <description>这里我们主要考虑用户使用键盘与鼠标，与游戏进行交互。
键盘控制 利用键盘控制物体移动，
import pygame from pygame.locals import * from sys import exit background_image_filename=&amp;#39;sushiplate.jpg&amp;#39; screen = pygame.display.set_mode((640,480),0,32) background = pygame.image.load(background_image_filename).convert() x,y=0,0 move_x,move_y=0,0 while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() if event.type == KEYDOWN: if event.key == K_LEFT: move_x = -1 elif event.key == K_RIGHT: move_x = 1 elif event.key == K_UP: move_y = 1 elif event.key == K_DOWN: move_y = -1 elif event.type == KEYUP: move_x=0 move_y=0 x+= move_x y+= move_y screen.</description>
    </item>
    
    <item>
      <title>Pygame:motion</title>
      <link>https://boseliao.github.io/posts/pygamemotion/</link>
      <pubDate>Sat, 25 Jul 2020 17:24:29 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/pygamemotion/</guid>
      <description>首先，考虑一个简单的直线运动，
background_image_filename = &amp;#39;sushiplate.jpg&amp;#39; sprite_image_filename = &amp;#39;fugu.png&amp;#39; import pygame from pygame.locals import * from sys import exit pygame.init() screen = pygame.display.set_mode((640, 480), 0, 32) background = pygame.image.load(background_image_filename).convert() sprite = pygame.image.load(sprite_image_filename) # sprite的起始x坐标 x = 0. # Clock对象 clock = pygame.time.Clock() # 速度（像素/秒） speed = 250. while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() screen.blit(background, (0,0)) screen.blit(sprite, (x, 100)) time_passed = clock.tick() time_passed_seconds = time_passed / 1000.0 distance_moved = time_passed_seconds * speed x += distance_moved # 如果移动出屏幕了，就搬到开始位置继续 if x &amp;gt; 640.</description>
    </item>
    
    <item>
      <title>Pygame:visuals</title>
      <link>https://boseliao.github.io/posts/pygamevisuals/</link>
      <pubDate>Thu, 23 Jul 2020 16:56:10 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/pygamevisuals/</guid>
      <description>游戏中的视觉效果是由一系列色素构成的，每一个色素点用RGB（Red，Green，Blue）描述。我们可以生成一副包含所有颜色的图片，
import pygame pygame.init() screen = pygame.display.set_mode((640,480)) all_colors = pygame.Surface((4096,4096),depth=24) for r in range(256): print(r+1,&amp;#34;out of 256&amp;#34;) x = (r&amp;amp;15)*256 y = (r&amp;gt;&amp;gt;4)*256 for g in range(256): for b in range(256): all_colors.set_at((x+g,y+b),(r,g,b)) pygame.image.save(all_colors,&amp;#34;all_colrs.bmp&amp;#34;) pygame.Surface((width, height), flags=0, depth=0, masks=None)创建一个python的Surface图片实例，上文的convert()方法就是将加载的图片装换成Surface类。这里利用了方法set_at()设置像素值。
接下来我们利用如下程序来呈现如何改变三原色的配比来合成新的颜色，
import pygame from pygame.locals import * from sys import exit pygame.init() screen = pygame.display.set_mode((640,480),0,32) #create image with smooth gradients def create_scales(height): red_scale_surface = pygame.surface.Surface((640, height)) green_scale_surface = pygame.surface.Surface((640, height)) blue_scale_surface = pygame.</description>
    </item>
    
    <item>
      <title>Pygame:framework</title>
      <link>https://boseliao.github.io/posts/pygameframework/</link>
      <pubDate>Thu, 23 Jul 2020 15:04:19 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/pygameframework/</guid>
      <description>利用Pygame学习一些简单的游戏开发，参考书目《Beginning Game Development with Python and Pygame》，原书的代码是基于python2，所以笔者对代码做了一些修改，测试环境如下，
 操作系统：windows 10 python版本：3.7.7 Pygame版本：1.9.6  Pygame编写游戏的基本框架，
import pygame background_image_filename=&amp;#39;sushiplate.jpg&amp;#39; mouse_image_filename=&amp;#39;fugu.png&amp;#39; from pygame.locals import * from sys import exit #It initializes each of the submodules in the pygame package, #pygame.sound.init() will initialize the sound module pygame.init() #create a display surface screen = pygame.display.set_mode((640,480),0,32) #set the title bar of thePygame window pygame.display.set_caption(&amp;#34;Hello,world!&amp;#34;) backgroound = pygame.image.load(background_image_filename).convert() mouse_cursor = pygame.image.load(mouse_image_filename).convert_alpha() while True: #the close button in the Pygame window for event in pygame.</description>
    </item>
    
    <item>
      <title>QC:search_algorithm</title>
      <link>https://boseliao.github.io/posts/qcsearch_algorithm/</link>
      <pubDate>Sat, 27 Jun 2020 19:38:17 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qcsearch_algorithm/</guid>
      <description>使用量子搜索算法(Grover&amp;rsquo;s algorithm)能够大大降低计算的复杂度，这里我们可以利用几何图形分析该算法。
定义一个算符 $$ O\sum_x\alpha_x|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)=\sum_x(-1)^{f(x)}\alpha_x|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right) $$ 其中，a是我门要搜索的目标态，|x&amp;gt;表示数据库， $$ x=a,f(x)=1;\quad x\neq a ,f(x)=0.\quad a\in {1,\cdots,N} $$ 从初态psi每次转动theta角度(相对于做两次投影对称)，需要pi/(2*theta)次转动，
首先，考虑态相对于alpha的投影对称，这里a=beta $$ O\sum_x\alpha_x|x\rangle=\sum_x(-1)^{f(x)}\alpha_x|x\rangle=\sum_{x\neq a}\left(\alpha_x|x\rangle-\alpha_a|a\rangle\right)=\sum_{x}\left(\alpha_x|x\rangle-2\alpha_a|a\rangle\right) $$ 相当于翻转beta方向的态失 $$ O=I-2|a\rangle\langle a|=R_{\alpha} $$ 然后相对于psi投影翻转 $$ R_{\psi}=-I+2|\psi\rangle\langle\psi|=H^{\otimes n}\left(-I+2|0\rangle\langle 0| \right)H^{\otimes n} $$ 即 $$ \left[\left(|\psi\rangle\langle\psi|-I \right)O \right]^R\frac{1}{\sqrt{N}}\sum_{x=1}^N|x\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right)\approx |a\rangle\left(\frac{|0\rangle-|1\rangle}{\sqrt{2}} \right) $$ 其中 $$ R=\frac{\pi\sqrt{N}}{4} $$ 测量第一个寄存器可以得到a。这里搜索1至2^n的数据库，
其中的Grover算符，</description>
    </item>
    
    <item>
      <title>QC:shor_orderfounding</title>
      <link>https://boseliao.github.io/posts/qcshor_orderfounding/</link>
      <pubDate>Wed, 17 Jun 2020 12:50:24 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qcshor_orderfounding/</guid>
      <description>算法原理：
设一大数N，可以分解成N=n1*n2，shor算法概述：
 随机取一正整数y，要求y&amp;lt;N，且与N互质，利用order-founding算法求r=ord(y,N)，r是使得 $$ y^r(mod)N=1 $$ 的最小整数。等价的可以得到 $$ \begin{array}{1c} y^r=kN+1\newline y^{r+1}=kNy+y\newline y^{r+1}(mod)N=y(mod)N\newline y^{r+x}(mod)N=y^x(mod)N \end{array} $$ 即函数f(t)的周期为r $$ f(t)=y^t(mod)N $$
 若得到的周期r为奇数或者r是偶数但 $$ y^{r/2}(mod)N=-1 $$ 则重新取y值，并重复第一个步骤。
 r是偶数，且 $$ y^{r/2}(mod)N\neq-1 $$ 取 $$ x(mod)N=y^{r/2},\quad x^2(mod)N=1,\quad (x+1)(x-1)=tN=t*n1*n2 $$ 分别对他们取最大公约数，可以得到n1，n2 $$ n1=gcd(x+1,N),\quad n2=gcd(x-1,N) $$
 Euclid&amp;rsquo;s algorithm计算gcd(x,N),N&amp;gt;x，
  $$ r=N(mod)x,\quad r=0,z=x $$
$$ r\neq 0,\quad z=gcd(N,x)=gcd(x,r)=gcd(r,r_1)=\cdots=gcd(r_m,0)=r_m $$
order founding 利用量子傅里叶算法以及量子相位估计算法实现r=ord(y,N)。
需要两组寄存器
 寄存器1，包含K个量子比特，存储数字Q $$ Q=2^K,\quad N^2&amp;lt;Q&amp;lt;2N^2 $$
 寄存器2，包含n个量子比特，存储数字N $$ N=2^n $$</description>
    </item>
    
    <item>
      <title>QC:quantum_phase_estimation</title>
      <link>https://boseliao.github.io/posts/qcquantum_phase_estimation/</link>
      <pubDate>Sat, 13 Jun 2020 18:16:09 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qcquantum_phase_estimation/</guid>
      <description>quantum phase estimation(QPE) 量子相位估计算法应用了量子傅里叶逆变换，同时作为一个实用的基础量子算法，又被应用在Shor&amp;rsquo;s Algorithm（质因式分解算法），和HHL algorithm（经常用于各种量子机器学习的最优化算法）等等算法中。
假设有一个幺正算符U，具有本征态|u&amp;gt;，以及对应的本征值为e^(i\phi),(0&amp;lt;\phi的量子比特，你的选取将会影响得到\phi的精度以及得到正确本征值的概率。二，第二组寄存器需要足够量子比特存储态|u&amp;gt;。
由图可知，第一组寄存器的量子比特经过一个Hadmard门和C-U^{2^j}门 $$ |0\rangle\cdots|0\rangle|u\rangle\to Hadamard\to\frac{1}{\sqrt{2^n}}\left(|0\rangle+|1\rangle \right)\cdots\left(|0\rangle+|1\rangle \right)|u\rangle $$
$$ \to C-U^{2^j}\to\frac{1}{\sqrt{2^n}}\left(|0\rangle+e^{i2^{n-1}\phi}|1\rangle \right)\cdots\left(|0\rangle+e^{i\phi}|1\rangle \right)|u\rangle=\frac{1}{\sqrt{2^n}}\sum_{y=0}^{2^n-1}e^{i\phi y}|y\rangle |u\rangle $$
这里输出第一组寄存器中的\phi依赖于测量态的概率，但我们测量到的是态而非概率幅度，利用傅里叶变换可以将概率幅度存储的相位存储到量子态中。量子傅里叶逆变换为 $$ QFT^{-1}|y\rangle=\frac{1}{\sqrt{2^n}}\sum_{x=0}^{2^{n}-1}\exp(-2\pi i\frac{xy}{2^n})|x\rangle $$ 将\phi写成 $$ \phi=2\pi\left(\frac{a}{2^n}+\delta \right),\quad a=a_{n-1}\cdots a_0,0&amp;lt;\delta|u&amp;gt;，可以得到本征值 $$ \phi=\frac{2\pi a}{2^n} $$ 当\delta不等于0时，则测到态|a&amp;gt;|u&amp;gt;的概率幅 $$ C_a=\frac{1}{2^n}\sum_{y=0}^{2^n-1}e^{2\pi i\delta y}&amp;gt;\frac{2}{\pi} $$
import numpy as np import matplotlib.pyplot as plt import qutip as qt from qutip.qip.circuit import QubitCircuit, Gate from qutip.qip import gates def user_gate1(): &amp;#34;&amp;#34;&amp;#34; define C-U:control-qubit=0,u=1;conrol-qubit=1,u=[[1.,0.],[0.,-1.]] &amp;#34;&amp;#34;&amp;#34; mat_control0=qt.</description>
    </item>
    
    <item>
      <title>QC:quantum_FourierT</title>
      <link>https://boseliao.github.io/posts/qcquantum_fouriert/</link>
      <pubDate>Mon, 08 Jun 2020 17:39:53 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qcquantum_fouriert/</guid>
      <description>在一些数学或计算科学问题中，傅里叶变换是一种非常常用的手段，用于将待解决的问题转换成已知的问题。 $$ \tilde{f}(k)=\frac{1}{\sqrt{N}}\sum_{j=0}^{N-1}\exp(2\pi i\frac{jk}{N})f(j) $$ 相应的量子傅里叶变换是将算符作用到某一态|j&amp;gt;上得到由一组正交归一的基|0&amp;gt;,...,|N-1&amp;gt;线性叠加的态， $$ F|j\rangle=\frac{1}{\sqrt{N}}\sum_{k=0}^{N-1}\exp(2\pi i\frac{jk}{N})|k\rangle $$ 结合上面两个式子， $$ F\sum_{j=0}^{N-1}f(j)|j\rangle=\sum_{k=0}^{N-1}\tilde{f}(k)|k\rangle $$ 显然F的矩阵形式 $$ F_{kj}=\frac{1}{\sqrt{2^n}}\exp(2\pi i\frac{jk}{2^n}) $$ 如果有n个量子比特，则N=2^n，量子态可以写成 $$ |j\rangle=|j_{n-1},\cdots,j_0\rangle;j=j_{n-1}2^{n-1}+\cdots+j_02^0 $$
$$ |k\rangle=|k_{n-1},\cdots,k_0\rangle;k=k_{n-1}2^{n-1}+\cdots+k_02^0 $$
所以(2)式可以写成 $$ F|j_{n-1},\cdots,j_0\rangle=\frac{1}{\sqrt{2^n}}\sum_{k_{n-1}=0}^{1}\cdots\sum_{k_0=0}^{1}\exp(2\pi ij\sum_l\frac{2^lk_l}{2^n})|k_{n-1}\cdots k_0\rangle $$
$$ l\to n-l,=\frac{1}{\sqrt{2^n}}\otimes_{l=1}^{n}\sum_{k_{n-l}=0}^1\exp(2\pi ij\sum_l\frac{2^lk_l}{2^n})|k_{n-l}\rangle_{n-l}=\frac{1}{\sqrt{2^n}}\otimes_{l=1}^{n}\left(|0\rangle_{n-l}+e^{2\pi ij/2^l}|1\rangle_{n-l} \right) $$
由于 $$ e^{2\pi in}=1,e^{2\pi ij/2^l}=e^{2\pi i0.j_{l-1}\cdots j_0} $$
电路构造 Hadmard门 $$ H|j_{n-1}\rangle=\frac{1}{\sqrt{2}}\left(|0\rangle+(-1)^{j_{n-1}}|1\rangle \right)=\frac{1}{\sqrt{2}}\left(|0\rangle+e^{2\pi ij_{n-1}/2}|1\rangle \right) $$ C-R_k，受控相移门 $$ R_k=\left[\begin{array}{lr} 1 \quad 0 \newline \newline 0 \quad e^{\frac{2\pi i}{2^k}} \end{array}\right] $$ 量子傅里叶变换电路</description>
    </item>
    
    <item>
      <title>QC:quantum_algorithm</title>
      <link>https://boseliao.github.io/posts/qcquantum_algorithm/</link>
      <pubDate>Tue, 02 Jun 2020 07:46:20 +0800</pubDate>
      
      <guid>https://boseliao.github.io/posts/qcquantum_algorithm/</guid>
      <description>量子并行运算是一些量子算法中最基本的属性。它允许量子计算机对于不同的x能够同时计算f(x)。首先，考虑两个量子比特的幺正操作。 $$ U_f|x,y\rangle=|x,y\oplus f(x)\rangle $$ 其中，第一个寄存器储存自变量的数据，而第二个寄存器储存函数值。容易证明Uf操作总是一个幺正算符。 $$ \langle x\prime,y\prime|U_f|x,y\rangle=\langle x\prime,y\prime|x,y\oplus f(x)\rangle=\delta_{x\prime,x}\delta_{y\prime,y\oplus f(x)}=\delta_{x,x\prime}\delta_{y,y\prime\oplus f(x\prime)} $$
$$ =(\delta_{x,x\prime}\delta_{y,y\prime\oplus f(x\prime)})^*=(\langle x,y|U_f|x\prime,y\prime\rangle)^* $$
所以， $$ U_f=U_f^{\dagger} $$ 而 $$ U_f^2|x\rangle|y\rangle=|x\rangle|y\oplus f(x)\oplus f(x)\rangle=|x\rangle|y\rangle $$ 即 $$ U_f^2=1 $$ 任一二进制数可以表示为 $$ x=(x_{n-1},\cdots,x_0) $$ 对应的任一函数可以表示 $$ f(x^{(i)})=1,i=0,\cdots,m;f(x^{(i)})=0,i=m+1,\cdots,n-1 $$ 定义小项函数 $$ f^{(i)}(x)= \left[\begin{array}{lr} 1 \quad (x=x^{(i)}) \newline \newline 0 \quad (x \ne x^{(i)}) \end{array}\right. $$
则任一函数可以用小项函数来表示 $$ f(x)=f^{(1)}(x)\vee f^{(2)}(x)\vee\cdots f^{(m)}(x) $$ 每个小项函数对应于Cn-NOT操作。
量子加法器 对量子信息a和b进行加法，其进位储存在c $$ a=(a_{n-1},\cdots,a_0);b=(b_{n-1},\cdots,b_0);c=(c_{n},\cdots,c_0) $$ 量子加法器由两个模块组成，加法模块SUM(ai,bi,ci)和CARRY(ai,bi,ci)， $$ SUM(a_i,b_i,c_i):s_i=a_i\oplus b_i\oplus c_i $$</description>
    </item>
    
  </channel>
</rss>